<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code and eat and drink and life</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lycworks.me/blog/"/>
  <updated>2017-04-10T17:55:11.000Z</updated>
  <id>http://lycworks.me/blog/</id>
  
  <author>
    <name>YL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use cases for reference in React.js</title>
    <link href="http://lycworks.me/blog/2017/04/10/react-ref/"/>
    <id>http://lycworks.me/blog/2017/04/10/react-ref/</id>
    <published>2017-04-10T17:36:06.000Z</published>
    <updated>2017-04-10T17:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Powerful-ref"><a href="#Powerful-ref" class="headerlink" title="Powerful ref"></a>Powerful <code>ref</code></h1><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><ul>
<li>integrating third party DOM libraries (which has their own methods for rendering)</li>
<li>prevent exposing class/components and only use the method through reference</li>
</ul>
<h3 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h3><ul>
<li><code>ref</code> can be attached to DOM element/JSX<blockquote>
<p>it takes a callback with uses the JSX underlying component as the argument, so the method of the underlying can be retrieved by refering to ref</p>
</blockquote>
</li>
</ul>
<p>this is confusing, let’s see an example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">focus = ()=&gt; &#123;</div><div class="line">  this.textInput.focus()</div><div class="line">&#125;</div><div class="line"></div><div class="line">..</div><div class="line">&lt;div&gt;</div><div class="line">  &lt;input type=&quot;text&quot; ref=&#123;(inputorsomeplaceholder) =&gt; &#123; this.textInput = inputorsomeplaceholder &#125;&#125; /&gt;</div><div class="line">  &lt;input onClick=&#123; this.focus &#125;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>ref</code> can be attached to class component<blockquote>
<p>ref receives the mounted instance as the argument and underlying method can be accessed</p>
</blockquote>
</li>
</ul>
<h3 id="Dont"><a href="#Dont" class="headerlink" title="Dont"></a>Dont</h3><ul>
<li><code>ref</code> cannot be attached to functional component, since it does not have instance, since mount has to happen before referencing<blockquote>
<p>so if you want to use ref, change the fn component to a class component</p>
</blockquote>
</li>
</ul>
<h3 id="use-it-carefully"><a href="#use-it-carefully" class="headerlink" title="use it carefully"></a>use it carefully</h3><ul>
<li>only use it if you never going to manipulate the underlying component’s state and only accessing through methods</li>
<li>if you need to change the state, refer to using props to bubble up. A nice video I found while working on a project <a href="https://www.kirupa.com/react/transferring_properties.htm" target="_blank" rel="external">transferring_properties</a>. I also recommending his book since I really like his explanations 233</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Powerful-ref&quot;&gt;&lt;a href=&quot;#Powerful-ref&quot; class=&quot;headerlink&quot; title=&quot;Powerful ref&quot;&gt;&lt;/a&gt;Powerful &lt;code&gt;ref&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&quot;usage&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="react" scheme="http://lycworks.me/blog/tags/react/"/>
    
      <category term="reference" scheme="http://lycworks.me/blog/tags/reference/"/>
    
  </entry>
  
  <entry>
    <title>Responsive CSS</title>
    <link href="http://lycworks.me/blog/2017/04/04/responsive/"/>
    <id>http://lycworks.me/blog/2017/04/04/responsive/</id>
    <published>2017-04-05T01:27:39.000Z</published>
    <updated>2017-04-10T17:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>To refresh my mem and record the details for later reference</p>
<h2 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h2><ul>
<li>defines the area of the screen that the browser can render content to</li>
<li>uses dips for pixels (device-independent pixel)</li>
<li>if the viewport is not defined, browser will try its best ::)</li>
<li><p>viewport wide can be calculate using physical pixel/dip ratio</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>initial-scale establish a 1:1 relationship between dip and css pixels (css pixels = physical/dpr)</p>
</li>
</ul>
<h2 id="css-relative-positions"><a href="#css-relative-positions" class="headerlink" title="css relative positions"></a>css relative positions</h2><ul>
<li>width 100% instead of absolute</li>
<li>add max-width: 100% for img, embed, object, video</li>
</ul>
<h2 id="tap-target-size"><a href="#tap-target-size" class="headerlink" title="tap target size"></a>tap target size</h2><ul>
<li>min-size 48x48 =padding of 1.5em 1.5 times the font size</li>
</ul>
<h2 id="start-small"><a href="#start-small" class="headerlink" title="start small"></a>start small</h2><ul>
<li>prioritizing content and allowing performance thought</li>
</ul>
<h2 id="media-queries"><a href="#media-queries" class="headerlink" title="media queries"></a>media queries</h2><ul>
<li>@media screen and (..)</li>
<li>two ways max-width and min-width</li>
<li>max-width applied when viewport is less than the value specified</li>
<li><mark>never use min-device-width</mark> because it is the screen width..</li>
</ul>
<h2 id="decide-breakpoints"><a href="#decide-breakpoints" class="headerlink" title="decide breakpoints"></a>decide breakpoints</h2><ul>
<li>480, 690, 800 (HAMBURGER), ..</li>
<li>NO, decide the breakpoints base on contents</li>
</ul>
<h2 id="flexbox-for-grid-layout"><a href="#flexbox-for-grid-layout" class="headerlink" title="flexbox for grid layout"></a>flexbox for grid layout</h2><ul>
<li>default inline arrangement</li>
<li>add wrap to tell it is ok to wrap, which is great for mobile friendly</li>
<li>order which makes element arrangement super easy</li>
</ul>
<h2 id="backward-compatibility"><a href="#backward-compatibility" class="headerlink" title="backward compatibility"></a>backward compatibility</h2><ul>
<li>use vendor prefixed version</li>
</ul>
<h2 id="responsive-patterns"><a href="#responsive-patterns" class="headerlink" title="responsive patterns"></a>responsive patterns</h2><ul>
<li>mostly fluid - add auto margins left and right when screen is desktop-wide</li>
<li>column drop - change column size</li>
<li>layout shifter - uses order to achieve, default 0, -1 first, 1 last</li>
<li>** off canvas - nav is usually hidden in hamburger<br>transform and transition<br>flex-grow takes up the remaining viewport</li>
</ul>
<h2 id="responsive-images"><a href="#responsive-images" class="headerlink" title="responsive images"></a>responsive images</h2><ul>
<li>optimize using art direction/picture element, which is still a new tech?</li>
</ul>
<h2 id="responsive-tables"><a href="#responsive-tables" class="headerlink" title="responsive tables"></a>responsive tables</h2><ul>
<li>hidden column</li>
<li>no more tables - render all as display block and content: attr(data-th)</li>
<li>contained scrolling - add a div container and add overflow auto</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To refresh my mem and record the details for later reference&lt;/p&gt;
&lt;h2 id=&quot;viewport&quot;&gt;&lt;a href=&quot;#viewport&quot; class=&quot;headerlink&quot; title=&quot;viewport
    
    </summary>
    
    
      <category term="CSS" scheme="http://lycworks.me/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTMLassets</title>
    <link href="http://lycworks.me/blog/2017/04/03/HTMLassets/"/>
    <id>http://lycworks.me/blog/2017/04/03/HTMLassets/</id>
    <published>2017-04-03T20:10:02.000Z</published>
    <updated>2017-04-05T01:26:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="img"><a href="#img" class="headerlink" title="img"></a><code>img</code></h1><p>including <code>src</code>, <code>alt</code> and <code>title</code>.</p>
<ul>
<li><code>src</code> for source, which tend to be relative path for efficiency, and usually images are placed in a folder <code>/images</code> for SEO purpose</li>
<li><code>alt</code> is text displayed if image fail to load; for reachability, screen-reading</li>
<li><code>title</code> is the tooltip, which is replaced with HTML5’s <code>&lt;figure&gt;</code> and <code>&lt;figoption&gt;</code> to add captions to images</li>
</ul>
<h1 id="video-and-audio"><a href="#video-and-audio" class="headerlink" title="video and audio"></a><code>video</code> and <code>audio</code></h1><p>including <code>src</code>, <code>controls</code> and fallback content</p>
<ul>
<li><code>src</code> is the source link, which is often replaced with embedded <code>&lt;source&gt;</code> to achieve browser compatibility</li>
</ul>
<blockquote>
<p>mp4 is largely supported in IE/Safari, where as webm is Chrome and Firefox</p>
<p>source type is included for MIME parsing that can help browser read the files quicker</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;video&gt;</div><div class="line">  &lt;source src-&quot;bla.mp4&quot; type=&quot;video/mp4&quot;&gt;</div><div class="line">  &lt;source src=&quot;bla.webm&quot; type=&quot;video/webm&quot;&gt;</div><div class="line">  &lt;track kind=&quot;subtitles&quot; src=&quot;bla.vtt&quot; srclang=&quot;en&quot;&gt;</div><div class="line">  &lt;p&gt;HTML5 video is not supported, please view it here [link]&lt;/p&gt;</div><div class="line">&lt;/video&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>controls</code> should be manipulated in javascript, some default options are <code>autoplay</code>, <code>loop</code>, <code>muted</code>..</li>
<li><p>fallback content is the embedded paragraph in <code>video</code></p>
</li>
<li><p>** Enhance reachability - transcript of video using <code>&lt;track&gt;</code> it uses WebVTT format to write text files with metadata input</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WEBVTT</div><div class="line"></div><div class="line">1</div><div class="line">00:00:22.230 --&gt; 00:00:24.606</div><div class="line">This is a subtitle.</div></pre></td></tr></table></figure>
<h1 id="embed-iframe-and-object"><a href="#embed-iframe-and-object" class="headerlink" title="embed, iframe and object"></a><code>embed</code>, <code>iframe</code> and <code>object</code></h1><p>iframe replaced the other 2</p>
<ul>
<li>options include allowfullscreen, frameborder, src</li>
<li>can include fallback content</li>
<li>** it is a SEO practice to include the src when the page loaded</li>
<li>** security issue, risking clickjacking, use <mark>HTTPS</mark> and use the <code>sandbox</code> option</li>
</ul>
<blockquote>
<p>clickjacking is UI redress, when hacker inject iframe and make it unnoticeable. When user clicked that info are stolen</p>
<p>sandbox takes value ‘allow-scripts’ or ‘allow-same-origin’ but not both, can be also manipulated in javascript when sending request add the sandbox headers</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;img&quot;&gt;&lt;a href=&quot;#img&quot; class=&quot;headerlink&quot; title=&quot;img&quot;&gt;&lt;/a&gt;&lt;code&gt;img&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;including &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;alt&lt;/code&gt; and &lt;cod
    
    </summary>
    
    
      <category term="HTML" scheme="http://lycworks.me/blog/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>react-composition</title>
    <link href="http://lycworks.me/blog/2017/04/02/react-composition/"/>
    <id>http://lycworks.me/blog/2017/04/02/react-composition/</id>
    <published>2017-04-03T03:15:15.000Z</published>
    <updated>2017-04-03T17:35:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juzhiyuan.gitbooks.io/react/content/composition_vs_inheritance.html" target="_blank" rel="external">my ref</a></p>
<h1 id="composition"><a href="#composition" class="headerlink" title="composition"></a>composition</h1><p>Why composition? Flexibility, flexibility, flexibility!<br>It follows the DRY principal</p>
<p>use cases - profile image, which is often used a lot in diff places</p>
<h3 id="Steps-to-implementation"><a href="#Steps-to-implementation" class="headerlink" title="Steps to implementation"></a>Steps to implementation</h3><ol>
<li>create a function</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export function profile(props) &#123;</div><div class="line">  return (</div><div class="line">      &lt;div className=&quot;profile&quot;+props.size&gt;</div><div class="line">        &lt;img src=&quot;blabla&quot; /&gt;</div><div class="line">        &lt;span&gt;&#123;props.user&#125;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>use it. You can see I purposely named it lowercase to distinguish from class Component</li>
</ol>
<ul>
<li>in class</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &#123; profile &#125; from &apos;[..path]&apos;;</div><div class="line"></div><div class="line">class Profilepage extends Component &#123;</div><div class="line">  ..</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">        ..</div><div class="line">        &lt;profile size=&quot;small&quot; user=&quot;&#123;this.state.user&#125;&quot; /&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Simple and powerful, &gt;&gt;&gt;3 composition!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juzhiyuan.gitbooks.io/react/content/composition_vs_inheritance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;my ref&lt;/a&gt;&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
    
      <category term="react" scheme="http://lycworks.me/blog/tags/react/"/>
    
      <category term="composition" scheme="http://lycworks.me/blog/tags/composition/"/>
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="http://lycworks.me/blog/2017/03/28/javascript/"/>
    <id>http://lycworks.me/blog/2017/03/28/javascript/</id>
    <published>2017-03-28T21:33:27.000Z</published>
    <updated>2017-03-28T21:33:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css-detail</title>
    <link href="http://lycworks.me/blog/2017/03/28/css-detail/"/>
    <id>http://lycworks.me/blog/2017/03/28/css-detail/</id>
    <published>2017-03-28T21:24:06.000Z</published>
    <updated>2017-03-28T21:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Several-new-things-about-CSS"><a href="#Several-new-things-about-CSS" class="headerlink" title="Several new things about CSS"></a>Several new things about CSS</h1><ul>
<li><p>OOCSS (object oriented CSS), or the term to indicate keep the skin and structure separate, keep container and content separate</p>
<blockquote>
<p>Dont do <code>ul li.list-item</code>, do <code>.list-item</code></p>
</blockquote>
</li>
<li><p>ACSS (Atomic CSS), Atoms (html element), molecules (set of html), organism (a set of molecules, header for example), template (wireframe that contains all organisms), pages</p>
<blockquote>
<p>however this is not friendly with media queries</p>
</blockquote>
</li>
<li><p>BEM (Block, element, modifier)</p>
<blockquote>
<p><code>.block</code>, <code>.block__element</code>, <code>.block-modifier</code></p>
</blockquote>
</li>
<li><p>SMACSS (scalable and modular CSS)</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Several-new-things-about-CSS&quot;&gt;&lt;a href=&quot;#Several-new-things-about-CSS&quot; class=&quot;headerlink&quot; title=&quot;Several new things about CSS&quot;&gt;&lt;/a&gt;Se
    
    </summary>
    
    
      <category term="CSS" scheme="http://lycworks.me/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>express</title>
    <link href="http://lycworks.me/blog/2017/03/28/express/"/>
    <id>http://lycworks.me/blog/2017/03/28/express/</id>
    <published>2017-03-28T17:04:47.000Z</published>
    <updated>2017-03-28T17:04:47.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>microservices</title>
    <link href="http://lycworks.me/blog/2017/03/27/microservices/"/>
    <id>http://lycworks.me/blog/2017/03/27/microservices/</id>
    <published>2017-03-28T03:34:45.000Z</published>
    <updated>2017-03-28T23:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices"><a href="#microservices" class="headerlink" title="microservices"></a>microservices</h1><p>why - monoliths or single unit build are responsible for every possible fn<br>changes involve building/deploying the whole app! Especially <strong>scaling</strong></p>
<p>What is microservice? - An approach to develop a single app as a suite of small services, having multiple api endpoints that can scale individually 组件化，可以实现部分扩展</p>
<h2 id="POS"><a href="#POS" class="headerlink" title="POS"></a>POS</h2><ul>
<li>new features can be added as microservice, each deals with one concern only</li>
<li>maintainable!</li>
<li>easy to scale! Only scale the necessary parts/APIS</li>
<li>easy to deploy! Few dep</li>
<li>err resilience, only some are not working, not the entire crash down</li>
</ul>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><ul>
<li>communication between these APIS<br>options include HTTPS endpoints, API gateway</li>
</ul>
<blockquote>
<p>what is API gateway? A server that is the single entry point, similar to Facade from oo design</p>
</blockquote>
<ul>
<li>Seneca! what it is - helps you exchange JSON messages between your services/js modules   and have good looking and readable codebase<blockquote>
<p>uses actions and action calls, standard JSON <code>{role:&#39;servicename&#39;, cmd: &#39;action&#39;}</code></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices&quot;&gt;&lt;a href=&quot;#microservices&quot; class=&quot;headerlink&quot; title=&quot;microservices&quot;&gt;&lt;/a&gt;microservices&lt;/h1&gt;&lt;p&gt;why - monoliths or single 
    
    </summary>
    
    
      <category term="javascript" scheme="http://lycworks.me/blog/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://lycworks.me/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>mocha</title>
    <link href="http://lycworks.me/blog/2017/03/27/mocha/"/>
    <id>http://lycworks.me/blog/2017/03/27/mocha/</id>
    <published>2017-03-28T03:16:01.000Z</published>
    <updated>2017-03-28T03:16:01.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>promise-fuss</title>
    <link href="http://lycworks.me/blog/2017/03/27/promise-fuss/"/>
    <id>http://lycworks.me/blog/2017/03/27/promise-fuss/</id>
    <published>2017-03-28T02:54:13.000Z</published>
    <updated>2017-03-31T05:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>JS is singlethread, which means it runs after one is done. To achieve multithreaded, we have callbacks and events</p>
<p><code>addEventListener</code> - but event can happen before we started listen for them! Which takes time!!!</p>
<p>Promise allowed multithread async with <strong>chain methods</strong>!<br>Promise.all([fn1, fn2]).then(//loaded and do stuff, //failed)</p>
<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p>A promise can be</p>
<ul>
<li>fulfilled</li>
<li>rejected</li>
<li>pending</li>
<li>settled</li>
<li>then</li>
</ul>
<h3 id="GetStarted"><a href="#GetStarted" class="headerlink" title="GetStarted"></a>GetStarted</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">    if (worked) resolve(&apos;worked&apos;)</div><div class="line">    else reject(&apos;noooo&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;JS is singlethread, which means it runs after one 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dependency-injection</title>
    <link href="http://lycworks.me/blog/2017/03/27/dependency-injection/"/>
    <id>http://lycworks.me/blog/2017/03/27/dependency-injection/</id>
    <published>2017-03-28T02:45:36.000Z</published>
    <updated>2017-03-28T03:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function getAnimals(id) &#123;</div><div class="line">  return window.fetch(&apos;http://animalapi&apos; + id)</div><div class="line">  .then(res=&gt; res.json())</div><div class="line">  .then(data =&gt; data.results[0])</div><div class="line">&#125;</div><div class="line"></div><div class="line">//with dep-inj</div><div class="line">function getAnimals(fetch, id) &#123;</div><div class="line">  return fetch(&apos;http://animalapi&apos; + id)</div><div class="line">  .then(res=&gt; res.json())</div><div class="line">  .then(data =&gt; data.results[0])</div><div class="line">&#125;</div><div class="line"></div><div class="line">getAnimals(window.fetch, 123)</div><div class="line">.then(animal =&gt;</div><div class="line">  document.querySelector(&apos;.animal&apos;).innerHTML = animal.name)</div></pre></td></tr></table></figure>
<h1 id="what-is-dep-inj"><a href="#what-is-dep-inj" class="headerlink" title="what is dep-inj"></a>what is dep-inj</h1><p>dep is given from outside, pass in as param</p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><ul>
<li>Unit test, the test cannot inspect dependencies! So we have to pass them in<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">describe(&apos;getAnimals&apos;, ()=&gt; &#123;</div><div class="line">    if(&apos;works&apos;, ()=&gt; &#123;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Understand-fetch-API"><a href="#Understand-fetch-API" class="headerlink" title="Understand fetch API"></a>Understand fetch API</h2><p><code>fetch(url, options)</code> returns a promise with response object<br>to know/validate type of data eg JSON, we can do<br>.response.json().then().catch()</p>
<p>can be further simplified to avoid callback hells</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function checkStatus(res) &#123;</div><div class="line">  if.. return Promise.resolve(res)</div><div class="line">  else return Promise.reject(..)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getJSON(res) &#123;</div><div class="line">  return res.json()</div><div class="line">&#125;</div><div class="line"></div><div class="line">fetch(url)</div><div class="line">  .then(checkStatus) //if failed wont go on</div><div class="line">  .then(getJSON)</div><div class="line">  .then(function(data)&#123;</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">  .catch(..)</div></pre></td></tr></table></figure>
<p>fetch options</p>
<ul>
<li>method</li>
<li>HTTP header</li>
<li>body</li>
<li>credentials</li>
<li>cors</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var options = &#123;</div><div class="line">  &quot;method&quot; : &quot;post&quot;,</div><div class="line">  &quot;headers&quot; : &#123;</div><div class="line">    &quot;Authorization&quot; : &quot;TOken&quot;</div><div class="line">  &#125;</div><div class="line">    &quot;body&quot;: &quot;Hello world&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fetch mode options</p>
<ul>
<li>same-origin</li>
<li>cors</li>
<li>cors-with-forced-preflight</li>
<li>no-cors</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=g6-ZwZmRncs&amp;feature=iv&amp;src_vid=0X1Ns2NRfks&amp;annotation_id=video%3Ae324057a-4c5c-406b-82a9-3ef5a477bbe0" target="_blank" rel="external">Ref</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="dependency-injection" scheme="http://lycworks.me/blog/tags/dependency-injection/"/>
    
  </entry>
  
  <entry>
    <title>notes</title>
    <link href="http://lycworks.me/blog/2017/03/27/notes/"/>
    <id>http://lycworks.me/blog/2017/03/27/notes/</id>
    <published>2017-03-28T01:02:50.000Z</published>
    <updated>2017-03-31T05:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><ul>
<li><strong>single threaded, event based</strong><br>Why it is designed this way?</li>
<li>I/O is expensive, especially the waiting time..</li>
<li>Multilith, eg Apache consume too much CPU (one waits for another)</li>
<li>we must use async callback instead, it is designed to be used this way</li>
</ul>
<p>How do we use callback?</p>
<ul>
<li>option1 use first-class functions (pass around fn as data and do stuff)</li>
<li>option2 use composition or anonymous fn, closures that are executed after event</li>
<li>new option Promise - an abstraction to made callback more readable</li>
</ul>
<p>Node should only build small composible parts 组件 that does one thing</p>
<ul>
<li><strong>Error First Callback</strong> - err pass in callback function as the first param</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">callbackfunc(err, data) &#123;</div><div class="line">  if (err)&#123;</div><div class="line">    return console.log(err)</div><div class="line">  &#125;</div><div class="line">  console.log(data) //else</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Avoid callback hells</li>
</ul>
<ol>
<li>break callbacks into independent functions</li>
<li>use Async control flow library</li>
<li>generator with promises</li>
</ol>
<ul>
<li>promises<br>a concurrency primitive to handle async operations, execute later~<br>its advantage is that it is chainable<br><code>.then(), .catch()</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    //timeout</div><div class="line">&#125;).then(//do stuff after)</div></pre></td></tr></table></figure>
<ul>
<li>Consistent Code ESLint</li>
<li>Functions should do one thing</li>
<li><p>buildin debugger <code>node debug server.js</code> - <code>n</code> for next line, <code>repl</code> for details of object<br>Add <code>debugger</code> to where you want the execution to end then use <code>c</code> for running debugger</p>
</li>
<li><p>Avoid Cookie XSS attacks - when attacker try to inject executable javascript into html response<br>set flags on the set-cookie HTTP header</p>
</li>
</ul>
<ul>
<li><code>HttpOnly</code> - prevent attack from cross-site scripting</li>
<li><code>secure</code> - browser only send cookie if request is send through HTTPS; <code>express-cookie</code> have them by default</li>
</ul>
<ul>
<li>dependencies checking - update automatically <code>npm outdated</code></li>
<li>router - base on diff request, diff response (request handler)</li>
</ul>
<h1 id="Puzzles-are-fun-and-annoying"><a href="#Puzzles-are-fun-and-annoying" class="headerlink" title="Puzzles are fun and annoying"></a>Puzzles are fun and annoying</h1><p>promise need <code>.catch()</code> with <code>throw an error</code><br>security credentials must be compared within a fixed time, else prone to timing attacks</p>
<blockquote>
<p>what is timing attack? An attacker attempts to compromise a crypto by analyze the time taken to execute the algo (cows/bulls)</p>
</blockquote>
<p>Null is an object in JS - bar = null; typeof bar === ‘object’ //true..<br>NaN is a number in JS - number.isNaN() is a better practice<br>delete cannot deal with prototype attr<br>delete array element only makes the index element = undefined, the length does not change</p>
<p>Two types of function declaration</p>
<p>var foo = function(){} //runtime declaration, thus hoisting wont work<br>function foo(){} //parse time declaration</p>
<p>instanceof - prototype child  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nodejs&quot;&gt;&lt;a href=&quot;#Nodejs&quot; class=&quot;headerlink&quot; title=&quot;Nodejs&quot;&gt;&lt;/a&gt;Nodejs&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;single threaded, event based&lt;/strong&gt;&lt;br
    
    </summary>
    
    
      <category term="notes" scheme="http://lycworks.me/blog/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>unit-testing</title>
    <link href="http://lycworks.me/blog/2017/03/27/unit-testing/"/>
    <id>http://lycworks.me/blog/2017/03/27/unit-testing/</id>
    <published>2017-03-27T06:46:31.000Z</published>
    <updated>2017-03-27T07:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Why unit testing? @funfunfunction show the best example, where a radiation app has failed to protect people’s lives..</p>
<h1 id="3-Rules"><a href="#3-Rules" class="headerlink" title="3 Rules"></a>3 Rules</h1><ol>
<li>only commit after unit testing</li>
<li>teach mandatory code reviews</li>
<li>unbraid your code - using two design patterns injections and facade</li>
</ol>
<p>injection pattern - when injecting the param into direct function<br>facade - wrap in a function to mock the process</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Why unit testing? @funfunfunction show the best example, where a radiation app has failed to protect people’s lives..&lt;/p&gt;
&lt;h1 id=&quot;3-Rules
    
    </summary>
    
    
      <category term="softwarepractices" scheme="http://lycworks.me/blog/tags/softwarepractices/"/>
    
  </entry>
  
  <entry>
    <title>js-oop</title>
    <link href="http://lycworks.me/blog/2017/03/27/js-oop/"/>
    <id>http://lycworks.me/blog/2017/03/27/js-oop/</id>
    <published>2017-03-27T05:27:44.000Z</published>
    <updated>2017-03-27T06:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why-oop-class-inheritance-is-detrimental"><a href="#why-oop-class-inheritance-is-detrimental" class="headerlink" title="why oop class inheritance is detrimental"></a>why oop class inheritance is detrimental</h1><blockquote>
<p>The Gorilla Banana Problem - You wanted a banana but what you got was a gorilla holding the banana and the entire jungle ~ Joe Armstrong</p>
</blockquote>
<p>object composition &gt; class inheritance<br>JS is OOP/prototypal inheritance and functional programming  </p>
<ul>
<li>OOP include object without classes, object that links to another object</li>
<li>Functional Programming include closures, first class functions, lambdas</li>
</ul>
<p>Class inheritance should be avoided</p>
<ul>
<li>violates DRY principle!</li>
</ul>
<p>How to prototypal inheritance</p>
<ul>
<li>JS object can be dynamically extended after instantiated</li>
</ul>
<p>BUT react uses class! Not really, we can create functions<br>why not class? - props callback hell, diff color buttons</p>
<h2 id="idea1-factory-functions"><a href="#idea1-factory-functions" class="headerlink" title="idea1 factory functions"></a>idea1 factory functions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const dog = () =&gt; &#123;</div><div class="line">  const sound = &apos;woof&apos; //private to dog</div><div class="line">  return &#123;</div><div class="line">    talk: ()=&gt; console.log(sound)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//instantiate</div><div class="line">const sniffles = dog()</div><div class="line">sniffles.talk() //outputs: &quot;woof&quot;</div><div class="line">//calling</div><div class="line">button.click(sniffles.talk) //no this variable, no confusion on inheritance!</div></pre></td></tr></table></figure>
<h2 id="composition-to-the-rescue"><a href="#composition-to-the-rescue" class="headerlink" title="composition to the rescue!"></a>composition to the rescue!</h2><p>composition - design about what they do, instead of are</p>
<p><code>Object.assign</code> - it takes an object and assigns prop to it (making a new object!)<br>basically, with all of them actions in factory functions, we can do<br><code>xyz = x+y+z</code> where we accept state as function param</p>
<p>example of how it works @funfunfunction at youtube channel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//let&apos;s create a dog driver for fun!</div><div class="line">barker = (stateobj) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    bark: console.log(&apos;woof, I am &apos;+stateobj.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">driver = (stateobj) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    drive: ()=&gt; stateobj.position+=stateobj.speed</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const dogdriver = (name) =&gt; &#123;</div><div class="line">  let stateobj = &#123;</div><div class="line">    name,</div><div class="line">    speed: 100,</div><div class="line">    position: 0</div><div class="line">  &#125;</div><div class="line">  return Object.assign(</div><div class="line">      &#123;&#125;,</div><div class="line">      barker(stateobj),</div><div class="line">      driver(stateobj)</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">const sniffles = dogdriver(&apos;sniffles&apos;)</div><div class="line">sniffles.bark()</div></pre></td></tr></table></figure>
<blockquote>
<p>negatives, it is slower than class instantiation, 10,000 instances per frame is better performed with class</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;why-oop-class-inheritance-is-detrimental&quot;&gt;&lt;a href=&quot;#why-oop-class-inheritance-is-detrimental&quot; class=&quot;headerlink&quot; title=&quot;why oop clas
    
    </summary>
    
    
      <category term="javascript" scheme="http://lycworks.me/blog/tags/javascript/"/>
    
      <category term="oop" scheme="http://lycworks.me/blog/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>redux-persist</title>
    <link href="http://lycworks.me/blog/2017/03/23/redux-resist/"/>
    <id>http://lycworks.me/blog/2017/03/23/redux-resist/</id>
    <published>2017-03-23T19:50:26.000Z</published>
    <updated>2017-03-23T20:43:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-persist"><a href="#Redux-persist" class="headerlink" title="Redux persist"></a>Redux persist</h1><p><a href="https://juejin.im/entry/57cac7b167f3560057bb00a7" target="_blank" rel="external">when have time, will organize this post</a></p>
<h3 id="Reason-for-using"><a href="#Reason-for-using" class="headerlink" title="Reason for using"></a>Reason for using</h3><ul>
<li>saving code to persist a large amount of state</li>
<li><p>Simple codes (3 lines)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123;persistStore, autoRehydrate&#125; from ‘redux-persist’</div><div class="line">const store = createStore(reducer.., autoRehydrate())</div><div class="line">persistStore(store)</div></pre></td></tr></table></figure>
</li>
<li><p><code>persistStore(store, [config, callback])</code><br>Generating a <code>persistor</code> for <code>store</code> and use autoRehydrate (enhancer) to rehydration action’s dispatch</p>
</li>
</ul>
<blockquote>
<p>what is enhancer? A way to replace our chunky codes with localStorage stuff</p>
<p>what is persistor? It subscribes to store changes</p>
<p>can use blacklist (ignore), whitelist (only), storage engine, transforms (immutable, compress, encrypt, filter..), config obj</p>
<p>Callback rehydration (changing obj to state)</p>
<p>Can be chained</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-persist&quot;&gt;&lt;a href=&quot;#Redux-persist&quot; class=&quot;headerlink&quot; title=&quot;Redux persist&quot;&gt;&lt;/a&gt;Redux persist&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.im
    
    </summary>
    
    
      <category term="redux" scheme="http://lycworks.me/blog/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>CSS-fixed-div</title>
    <link href="http://lycworks.me/blog/2017/03/12/CSS-fixed-div/"/>
    <id>http://lycworks.me/blog/2017/03/12/CSS-fixed-div/</id>
    <published>2017-03-12T22:14:58.000Z</published>
    <updated>2017-03-13T04:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-popular-way-of-making-a-div-fixated-during-scrolling"><a href="#The-popular-way-of-making-a-div-fixated-during-scrolling" class="headerlink" title="The popular way of making a div fixated during scrolling"></a>The popular way of making a div fixated during scrolling</h1><p><a href="http://codepen.io/ylu21/pen/0384169de1b81c9a71023747d2b3ade9" target="_blank" rel="external">Demo</a></p>
<p>Using jQuery is currently the best way. Still figuring how to do it vanilla style though.</p>
<h3 id="Step1-uses-window-onscroll"><a href="#Step1-uses-window-onscroll" class="headerlink" title="Step1 - uses window.onscroll"></a>Step1 - uses window.onscroll</h3><p>what is <code>window.onscroll</code>? A listener that listens to scrolling event. An important thing to know here is, how to <strong>distinguish downward and upward scroll</strong></p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/4326845/how-can-i-determine-the-direction-of-a-jquery-scroll-event" target="_blank" rel="external">stackoverflow</a></p>
</blockquote>
<p>Using the trick presented on Stackoverflow</p>
<ul>
<li>set a global variable <code>lastScrollTop</code> initiate to <code>0</code></li>
<li>record a dynamic <code>$(window).scrollTop()</code> inside the onscroll listener<blockquote>
<p>what is scrollTop? - the top of the browser window, can be used with div as well</p>
</blockquote>
</li>
<li>check if the dynamic is bigger than lastScrollTop, and update lastScrollTop accordingly</li>
</ul>
<p>full code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lastScrollTop = 0</div><div class="line">$(window).scroll((e)=&gt;&#123;</div><div class="line">    var dynamicScrollTop = $(this).scrollTop()</div><div class="line">    if(dynamicScrollTop&gt;lastScrollTop)&#123;</div><div class="line">      //downward</div><div class="line">    &#125;else&#123;</div><div class="line">      //upward</div><div class="line">    &#125;</div><div class="line">    lastScrollTop = dynamicScrollTop</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Step2-getting-the-end-of-window-scrollTop"><a href="#Step2-getting-the-end-of-window-scrollTop" class="headerlink" title="Step2 - getting the end of window.scrollTop"></a>Step2 - getting the end of window.scrollTop</h3><p>domViewBottom - $(window).scrollTop() + $(window).height()</p>
<blockquote>
<p>simply window top + window height. Easy</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-popular-way-of-making-a-div-fixated-during-scrolling&quot;&gt;&lt;a href=&quot;#The-popular-way-of-making-a-div-fixated-during-scrolling&quot; class=
    
    </summary>
    
    
      <category term="CSS" scheme="http://lycworks.me/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="http://lycworks.me/blog/2017/03/11/CSS/"/>
    <id>http://lycworks.me/blog/2017/03/11/CSS/</id>
    <published>2017-03-12T04:43:57.000Z</published>
    <updated>2017-03-12T05:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rules-that-the-pros-said"><a href="#Rules-that-the-pros-said" class="headerlink" title="Rules that the pros said"></a>Rules that the pros said</h1><h3 id="Never-use-ID"><a href="#Never-use-ID" class="headerlink" title="Never use ID"></a>Never use ID</h3><p>Even though ID selector provides a faster speed, but that is only when it is use alone. In addition, in DOM, anything UI that one consider to be unique, data-binding is not unique. To ensure bug-free CSS, we prefer class &gt; id, or like the pros said, never id.</p>
<blockquote>
<p>When to use them? When we want to use JS, which can enhance our speed. <code>dom.getElementById()</code>. But js-* to name a class is also suggested for clarity.</p>
</blockquote>
<h3 id="Use-one-standard-for-semantic-class-name"><a href="#Use-one-standard-for-semantic-class-name" class="headerlink" title="Use one standard for semantic class name"></a>Use one standard for semantic class name</h3><p><code>app-component-class</code><br>By following this pattern, we can write <code>sass</code> like below<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myapp-Header</div><div class="line">  background: white</div><div class="line">  &amp;-link //this compiles to myapp-Header-link</div><div class="line">    color: blue</div><div class="line">  &amp;-signup &amp;-isScrolled  //this compiles to .myapp-Header-signup .myapp-Header-isScrolled</div><div class="line">    color: black</div></pre></td></tr></table></figure></p>
<h3 id="To-continue-the-tradition-of-DRY"><a href="#To-continue-the-tradition-of-DRY" class="headerlink" title="To continue the tradition of DRY"></a>To continue the tradition of DRY</h3><p>avoid as much as possible using child selector and <code>&gt;</code></p>
<h3 id="How-to-deal-with-css-libraries-and-default-css"><a href="#How-to-deal-with-css-libraries-and-default-css" class="headerlink" title="How to deal with css libraries and default css?"></a>How to deal with css libraries and default css?</h3><ul>
<li>css reset</li>
<li>all: initial - remove all styles, but has to be called inside element, and unfortunately <mark>is not supported in all browsers</mark></li>
<li>Shadow DOM - do not use it, it is still in beta</li>
</ul>
<h3 id="use-bootstrap-the-smart-way"><a href="#use-bootstrap-the-smart-way" class="headerlink" title="use bootstrap the smart way"></a>use bootstrap the smart way</h3><p>use what we need with our own customization, <code>@extend</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.myapp-Button</div><div class="line">  @extend .btn //from bootstrap</div></pre></td></tr></table></figure>
<h3 id="avoid-important"><a href="#avoid-important" class="headerlink" title="avoid !important"></a>avoid <code>!important</code></h3><p>it is a vicious cycle since important made a css element into higher priority abnormally<br>solution - use CSS linter to check goodness of css</p>
<h1 id="Practices"><a href="#Practices" class="headerlink" title="Practices"></a>Practices</h1><p>CSS priority list (Repost from a Chinese blogger)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">* - 0</div><div class="line">p - 1 (one element)</div><div class="line">li:first-of-type - 2 (one element, one pseudo e)</div><div class="line">ul li - 2 (2 e&apos;s)</div><div class="line">ul ol+li - 3</div><div class="line">h1 + *[href*=index] - 11 (one attr, one e)</div><div class="line">ul ol li.list-item - 13 (one class, 3 e&apos;s)</div><div class="line">li.list-item.list-item-title - 21 (two class, 1 e)</div><div class="line">#id - 100</div><div class="line">&lt;p style=&quot;&quot;&gt;&lt;/p&gt; - 1000 (one inline styling)</div><div class="line">article p - 2 (2 html selector)</div><div class="line">.class - 10</div><div class="line">div p.class - 12</div><div class="line"></div><div class="line">html #id .class p - 112 (1 html+ 100 id+ 10 class + 1 element)</div></pre></td></tr></table></figure>
<ul>
<li>Never combine too many, slow down rendering!!!</li>
</ul>
<p>CSS starter kit</p>
<ul>
<li>Use reset!!! This is important for browser.<br>Which one? Normalize V reset</li>
</ul>
<h3 id="Normalize-v-reset"><a href="#Normalize-v-reset" class="headerlink" title="Normalize v reset"></a>Normalize v reset</h3><p>Normalize is more modular, reset is more like destroy</p>
<h1 id="Use-BEM-block-element-and-modifier"><a href="#Use-BEM-block-element-and-modifier" class="headerlink" title="Use BEM (block, element and modifier)"></a>Use BEM (block, element and modifier)</h1><p>block - highest priority, the parent<br>element - uses <code>_</code> for child extending eg <code>.nav_link</code><br>modifier - changes some attribute, use <code>--</code> eg <code>.btn--primary</code></p>
<h1 id="the-rest"><a href="#the-rest" class="headerlink" title="the rest"></a>the rest</h1><ul>
<li>Modular-fy (suggested reading - atomic design)</li>
<li>Auto-prefixer </li>
<li>CSS-validator</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rules-that-the-pros-said&quot;&gt;&lt;a href=&quot;#Rules-that-the-pros-said&quot; class=&quot;headerlink&quot; title=&quot;Rules that the pros said&quot;&gt;&lt;/a&gt;Rules that the
    
    </summary>
    
    
      <category term="css" scheme="http://lycworks.me/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>flask</title>
    <link href="http://lycworks.me/blog/2017/03/07/flask/"/>
    <id>http://lycworks.me/blog/2017/03/07/flask/</id>
    <published>2017-03-07T16:15:43.000Z</published>
    <updated>2017-03-07T16:15:43.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://lycworks.me/blog/2017/02/25/reduxxxx/"/>
    <id>http://lycworks.me/blog/2017/02/25/reduxxxx/</id>
    <published>2017-02-25T21:56:58.000Z</published>
    <updated>2017-02-25T23:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>prerequisite - clear understanding of react</p>
<h1 id="What-is-redux"><a href="#What-is-redux" class="headerlink" title="What is redux?"></a>What is redux?</h1><p>Redux - a state manager that controls data flow and layout properties</p>
<h1 id="What-is-the-structure"><a href="#What-is-the-structure" class="headerlink" title="What is the structure?"></a>What is the structure?</h1><p>Actions, Reducers, Store?<br>But that’s not the structure, redux is simply a state object that represents your app, and they can be manipulated by the above components!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">default_state = &#123;</div><div class="line">  users: &#123;&#125;,</div><div class="line">  bgcolor: white</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>more details, refer to <a href="http://redux.js.org/" target="_blank" rel="external">doc</a></p>
<h3 id="Action-the-manipulator"><a href="#Action-the-manipulator" class="headerlink" title="Action - the manipulator"></a>Action - the manipulator</h3><p>usually in the format of js files (they all are actually), within the file, one can declare the methods that is going to manipulate the redux object <code>default_state</code>.</p>
<p>How it manipulate a state? Through actions dispatched by react components, like <strong>onclick</strong> event or form submission, that change the global <code>default_state</code>‘s properties.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export function loadUsersAction()&#123;</div><div class="line">  return &#123;</div><div class="line">    type: &apos;LOAD_USERS&apos;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>inside an action-creator method, it returns the action for usage in reducer. How they are referred/identified is by <code>type</code>, which is an action tag</li>
<li>A good practice is to have a separate file that lists all the tags to enhance workflow and avoid typo</li>
</ul>
<h3 id="Reducer-the-updater"><a href="#Reducer-the-updater" class="headerlink" title="Reducer - the updater"></a>Reducer - the updater</h3><p>in its js file, one creates the <code>default_state</code> constant, and creates a state update function which is commonly called reducer, that takes two parameters default_state and action respectively.</p>
<blockquote>
<p>where it came from? <code>Array.prototype.reduce(reducer, default_state)</code>. For more info, visit <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">MDN javascript doc</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">export default function appReducer(state = defaultState, action)&#123;</div><div class="line">  switch(action.type)&#123;</div><div class="line">    case &apos;USER_LOADED&apos;:</div><div class="line">      return &#123;</div><div class="line">        ...state, //this is a object spread operator Object.assign() to create copies</div><div class="line">        users: action.users,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    case &apos;USER_CREATE&apos;:</div><div class="line">      return&#123;</div><div class="line">        ...state,</div><div class="line">        oneuser: action.oneuser,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      default:</div><div class="line">        return state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>usually, a switcher is used for conditionally updating. How it switches is by the action tag (more complicated is that with middleware, we can create new tags)</li>
<li>in here we can see we can refer to action’s attribute as well. In the above example, I have a <code>createUserAction(user)</code> in <code>actions.js</code>, where i returned a variable called <code>oneuser</code></li>
<li>The <code>...</code> means object spread operator. This is equal to <code>Object.assign</code>, which is used for making a copy of an object. It is a good practice to always create new state instead of manipulating the <code>default_state</code></li>
</ul>
<h3 id="Store-the-state-packager"><a href="#Store-the-state-packager" class="headerlink" title="Store - the state packager"></a>Store - the state packager</h3><p>You might ask, why we need store when we can update state with reducer? Well, when we are processing get request, we want to return the state to the react components. The easiest way is the provided way, to have a store/manager imported to react’s entry point</p>
<p>To create a store, we first create <code>store.js</code> like we did for actions and reducers, within the js file we create a <code>createStore</code>, which takes two parameter reducer and middleWare. Here we introduced middleware, which is another reason we might want to use store. We will explain the purpose of middleware next.</p>
<h3 id="Middleware-the-async-data-flow-handler"><a href="#Middleware-the-async-data-flow-handler" class="headerlink" title="Middleware - the async data flow handler"></a>Middleware - the async data flow handler</h3><p>usually, when there are data, there are requests, when there are request, they are Asynchronous (what is async? refer to this <a href="http://stackoverflow.com/questions/16715380/what-is-difference-between-asynchronous-http-request-and-synchronous-http-reques" target="_blank" rel="external">doc</a>). Having async means there are going to be closure, and even through promise help a lot, it is still ugly code. When the request are dependent on each other, it can be a mess. That’s why we use middleware. Currently, there are two popular choices - <code>redux-saga</code> and <code>thunk</code>. In this lesson, since I only used redux-saga, for thunk info please look elsewhere.</p>
<h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a><code>redux-saga</code></h3><p><a href="https://redux-saga.github.io/redux-saga/docs/recipes/index.html" target="_blank" rel="external">doc</a></p>
<p>Saga is a middleware that uses generator functions to perform async transactions. The positive thing about having saga is they can log error, the negative thing is, for every action, there has to be a saga series of action handler and action listener.</p>
<p>example to illustrate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//saga.js</div><div class="line">export function* loadUserSaga()&#123;</div><div class="line">  try&#123;</div><div class="line">    let users = yield getFetch(); //import from api.js</div><div class="line">    yield put(&#123;type:&apos;USER_LOADED&apos;, users: users&#125;)</div><div class="line">  &#125; catch(error) &#123;</div><div class="line">    console.log(error);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function* watchForLoadUsers()&#123;</div><div class="line">  yield takeEvery(&apos;LOAD_USERS&apos;, loadUserSaga);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//reducer.js</div><div class="line">  ...</div><div class="line">  switch(action.type)&#123;</div><div class="line">    case &apos;USER_LOADED&apos;:</div><div class="line">      return &#123;</div><div class="line">        ...state, //object spread operator == Object.assign() to create copies</div><div class="line">        users: action.users,</div><div class="line">      &#125;;</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<ul>
<li>the <code>*</code> means generator function</li>
<li>the handler is <code>loadUserSaga()</code>, which loads from an api’s fetch, and the response is saved to users and send back to reducer with a action tag <code>USER_LOADED</code>. Then in actions.js, the state can be updated by switch case <code>USER_LOADED</code>.</li>
<li><code>api.js</code> is where api calls are handled. It is a good practice to have them all in the same place.</li>
<li><code>put</code> (<code>call</code>, <code>take</code> and <code>takeEvery</code>) <a href="https://redux-saga.github.io/redux-saga/docs/basics/UsingSagaHelpers.html" target="_blank" rel="external"> info</a></li>
<li>often we create a wrapper <code>rootsaga</code> to start all the saga listeners</li>
</ul>
<h1 id="How-it-is-actually-used"><a href="#How-it-is-actually-used" class="headerlink" title="How it is actually used?"></a>How it is actually used?</h1><p>Inside our app’s react entry point, in my case is the index.js, we import the store and the saga (<a href="https://redux-saga.github.io/redux-saga/docs/introduction/BeginnerTutorial.html" target="_blank" rel="external"> implementation details</a>), and pass down to it’s children components as props through <code>Provider</code>, provided by <code>react-redux</code> module.</p>
<blockquote>
<p>note, saga only starts once, then watch for actions</p>
</blockquote>
<p><code>Provider</code> provides global access to redux store and child components, allow us to use <code>connect()</code> to communicate the data flow</p>
<p><code>connect()</code> has two parameters <code>mapStateToProps</code> and <code>mapDispatchToProps</code> and an immediate function call on <code>Componentname</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">immediate callback</div><div class="line">function()&#123;&#125;(Componentname)</div></pre></td></tr></table></figure>
<p><code>mapStateToProps</code> - <strong>read</strong> redux store state into react props</p>
<p><code>mapDispatchToProps</code> - <strong>receive</strong> response from dispatched actions and can create variables for injecting to view</p>
<ul>
<li><p>usually when we want to dispatch action from component, we first do <code>connect([params])(Componentname)</code>, then extract <code>dispatch</code> through <code>const { dispatch } = this.props</code>.</p>
</li>
<li><p><code>dispatch()</code> takes an imported action function</p>
</li>
</ul>
<p>For the current time, there are no full examples, but hopefully the basics of redux are explained well :)</p>
<p>An example by someone else (forgot the link, if someone knows where it is from, please leave a comment)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class="line">import * as actions from &apos;./actions&apos;;</div><div class="line"></div><div class="line">let createHandlers = function(dispatch) &#123;</div><div class="line">  let onClick = function(node, data) &#123;</div><div class="line">    dispatch(actions.nodeClicked(data))</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return &#123;</div><div class="line">    onClick,</div><div class="line">    // other handlers</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Controls extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.handlers = createHandlers(this.props.dispatch);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    // pass this.handlers anywhere you&apos;d like</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default connect()(Controls);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;prerequisite - clear understanding of react&lt;/p&gt;
&lt;h1 id=&quot;What-is-redux&quot;&gt;&lt;a href=&quot;#What-is-redux&quot; class=&quot;headerlink&quot; title=&quot;What is redux?&quot;
    
    </summary>
    
    
      <category term="redux" scheme="http://lycworks.me/blog/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>router</title>
    <link href="http://lycworks.me/blog/2017/02/17/router/"/>
    <id>http://lycworks.me/blog/2017/02/17/router/</id>
    <published>2017-02-18T04:07:31.000Z</published>
    <updated>2017-02-18T05:26:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><p>understand by doing, best <a href="https://www.youtube.com/watch?v=fPgE67iLkns" target="_blank" rel="external">video</a> found.</p>
<p>Word version</p>
<ul>
<li>create pages folder for each route eg <code>Home, About and etc</code></li>
<li>create a NotFound 404 page to deal with unknown url cases</li>
<li>in source folder where App.js is stored, create routes.js</li>
<li><code>npm install react-router</code></li>
<li>import the router and the components</li>
<li>create a constant called Routes and create a Router JSX<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const Routes = (props) =&gt; (</div><div class="line">    &lt;Router &#123;...props&#125;&gt;</div><div class="line">    ..nest for single page</div><div class="line">    &lt;/Router&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Single-page"><a href="#Single-page" class="headerlink" title="Single page"></a>Single page</h1><p>To create single page render, nest inside Router props, so that the embedded/nested are all accessible through <code>this.props.children</code> (will be explained later).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const Routes = (props) =&gt; (</div><div class="line">    &lt;Router &#123;...props&#125;&gt;</div><div class="line">      &lt;Route path=&apos;/&apos; component=&#123; App &#125;&gt;</div><div class="line">        &lt;Route path=&apos;/about&apos; component=&#123; About &#125; /&gt;</div><div class="line">        &lt;Route path=&apos;*&apos; component=&#123; NotFound &#125; /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Router&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>From this structure, what are accessible? Let’s review.<br>First of all we have <code>this.props</code> where <code>this</code> refers to <code>routes.js</code>, and its children is <code>App</code>.<br>Also, <code>App</code> itself contains children <code>About</code> and <code>NotFound</code>. So we can do the following to add the components onto our App.</p>
<h1 id="Add-the-components-in-App-js"><a href="#Add-the-components-in-App-js" class="headerlink" title="Add the components in App.js"></a>Add the components in App.js</h1><p>So in App.js, <code>this</code> refers to the <code>App</code>, we can do <code>this.props.children</code> to obtain the <code>About</code> and <code>NotFound</code> components. The adding component part is really easy, add this one-liner at the place you want it to display - <code>{this.props.children}</code>.</p>
<h1 id="Add-the-router-in-index-js"><a href="#Add-the-router-in-index-js" class="headerlink" title="Add the router in index.js"></a>Add the router in index.js</h1><p>What is index.js? As seen in the pacakge.json setting files, index is the entry point, where everything got rendered. In here, if we create react app using the command <code>create-react-app</code>, we will see something like this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;App /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>This means a App component is being rendered at the DOM <code>#root</code>.</p>
<p>To add our router, we need to do just these three steps</p>
<ul>
<li>import our <code>Routes</code> from <code>routes.js</code></li>
<li>import <code>browserHistory</code> from <code>react-router</code></li>
<li>replace the render <code>App</code> to our <code>Routes</code></li>
</ul>
<blockquote>
<p>What is browserHistory? browserHistory is used for url readability, to prevent cases like <code>website.com/#/page</code> to occur, which can seem odd to users. For more info, check their github doc <a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/NavigatingOutsideOfComponents.md" target="_blank" rel="external">browserHistory</a>.</p>
</blockquote>
<h1 id="Passing-params"><a href="#Passing-params" class="headerlink" title="Passing params"></a>Passing params</h1><p><a href="http://stackoverflow.com/questions/32901538/how-does-react-router-pass-params-to-other-components-via-props" target="_blank" rel="external">Referencing source</a></p>
<p>Luckily, this step is internally programmed in <code>react-router</code>. for example in a const routes’s props, if i do<br><code>&lt;Route path=&quot;/posts/:id&quot; component={ Post } /&gt;</code>, I can automatically get the id by <code>this.props.params.id</code> in the <code>Post</code> component, which is magical. Why does this works? Dive deeper into the structure of <code>react-router</code>.</p>
<h3 id="Understand-React-router-structure"><a href="#Understand-React-router-structure" class="headerlink" title="Understand React-router structure"></a>Understand React-router structure</h3><p><code>react-router</code> uses props to pass all the routing info to the children components recursively.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;new HashHistory&#125;&gt;</div><div class="line">  &lt;Route path=&quot;/&quot; component=&#123;Main&#125;&gt;</div><div class="line">    &lt;Route path = &quot;topics/:id&quot; component=&#123;Topic&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>for this example, react-router will go through each, starting from Main to Topic, and pass the following fundamental props to each of the components when the component is created (where it is rendered!) using React.createElement (its inner function).</p>
<p>What props are passed down?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const props = &#123;</div><div class="line">   history,</div><div class="line">   location,</div><div class="line">   params,</div><div class="line">   route,</div><div class="line">   routeParams,</div><div class="line">   routes</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In other words, these props are internally parsed by <code>react-router</code> using <code>this.createElement(components[key], props)</code>, therefore one can access the <code>:id</code> in component <code>Topic</code> by simply doing <code>{this.props.params.id}</code></p>
<h1 id="Afterword"><a href="#Afterword" class="headerlink" title="Afterword"></a>Afterword</h1><p>I hope this tutorial is clear and useful, if you have any question or suggestion, feel free to leave a comment below. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Router&quot;&gt;&lt;a href=&quot;#Router&quot; class=&quot;headerlink&quot; title=&quot;Router&quot;&gt;&lt;/a&gt;Router&lt;/h1&gt;&lt;p&gt;understand by doing, best &lt;a href=&quot;https://www.youtube
    
    </summary>
    
    
      <category term="react" scheme="http://lycworks.me/blog/tags/react/"/>
    
      <category term="router" scheme="http://lycworks.me/blog/tags/router/"/>
    
  </entry>
  
</feed>
