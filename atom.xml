<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code and eat and drink and life</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lycworks.me/blog/"/>
  <updated>2017-02-02T21:09:09.000Z</updated>
  <id>http://lycworks.me/blog/</id>
  
  <author>
    <name>YL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lycworks.me/blog/2017/02/02/hello-world/"/>
    <id>http://lycworks.me/blog/2017/02/02/hello-world/</id>
    <published>2017-02-02T21:09:09.000Z</published>
    <updated>2017-02-02T21:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Path路径查找问题</title>
    <link href="http://lycworks.me/blog/2017/02/02/find-path/"/>
    <id>http://lycworks.me/blog/2017/02/02/find-path/</id>
    <published>2017-02-02T05:00:00.000Z</published>
    <updated>2017-02-03T01:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="the-套路"><a href="#the-套路" class="headerlink" title="the 套路"></a>the 套路</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Unique path - 一个机器人从左上角走到右下角有多少种方法？  </p>
<p>具体思路使用dp即可。首先把第0排和第0行全部设置为1因为只有一种方法走到。<br>通过左边和上边即可算出连接到中间点所需path数量  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ + + +</div><div class="line"></div><div class="line">+ X _ _ #能到达X的路只有上和左</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dp = [[0 for _ in range(n)] for _ in range(m)]</div><div class="line"></div><div class="line">for j in range(n):</div><div class="line">	dp[0][j] = 1</div><div class="line">for i in range(m):</div><div class="line">	dp[i][j] = 1</div><div class="line">for i in range(1,m):</div><div class="line">	for j in range(1,n):</div><div class="line">		dp[i][j]=dp[i-1][j]+dp[i][j-1]</div><div class="line"></div><div class="line">return dp[m-1][n-1]</div></pre></td></tr></table></figure>
<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>Minimum path sum - 算出最少cost的path  </p>
<p>跟上一道很像，得出了path sum基本上只要是matrix和dp就把边界算出来，<br>然后再乃个加和比较来求出最小  </p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dp[0][0] = matrix[0][0]</div><div class="line">for j in range(1,n): #the sum of first row</div><div class="line">	dp[0][j] = dp[0][j-1]+matrix[0][j]</div><div class="line"></div><div class="line">for i in range(1,m): #first col</div><div class="line">	dp[i][0] = dp[i-1][0]+matrix[i][0]</div><div class="line"></div><div class="line">for i in range(1, m):</div><div class="line">	for j in range(1,n):</div><div class="line">		dp[i][j] = min(dp[i-1][j], dp[i][j-1])+matrix[i][j]</div><div class="line"></div><div class="line">return dp[m-1][n-1]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;the-套路&quot;&gt;&lt;a href=&quot;#the-套路&quot; class=&quot;headerlink&quot; title=&quot;the 套路&quot;&gt;&lt;/a&gt;the 套路&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;
    
    </summary>
    
      <category term="Algo" scheme="http://lycworks.me/blog/categories/Algo/"/>
    
    
      <category term="dfs" scheme="http://lycworks.me/blog/tags/dfs/"/>
    
      <category term="path" scheme="http://lycworks.me/blog/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>Divide &amp; Conquer</title>
    <link href="http://lycworks.me/blog/2017/02/01/dc/"/>
    <id>http://lycworks.me/blog/2017/02/01/dc/</id>
    <published>2017-02-01T05:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Divide-amp-Recursion-amp-Conquer"><a href="#Divide-amp-Recursion-amp-Conquer" class="headerlink" title="Divide &amp; Recursion &amp; Conquer"></a>Divide &amp; Recursion &amp; Conquer</h1><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>算左，算右，算左+右</p>
<blockquote>
<blockquote>
<p>例题 max subtree path, quicksort</p>
</blockquote>
</blockquote>
<p>quicksort basic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def quicksort(arr):</div><div class="line">  if not arr or len(arr)&lt;=1: return arr</div><div class="line">  pivot = arr[0]</div><div class="line">  left = []</div><div class="line">  right = []</div><div class="line">  for q in arr[1:]:</div><div class="line">    if q&lt;=pivot:</div><div class="line">      left.append(q)</div><div class="line">    else:</div><div class="line">      right.append(q)</div><div class="line">  return quicksort(left)+[pivot]+quicksort(right)</div></pre></td></tr></table></figure></p>
<h2 id="exponential"><a href="#exponential" class="headerlink" title="exponential"></a>exponential</h2><p>如果even算两个k的n/2如果odd算n-1的。。类似dp？</p>
<h2 id="打乱数组"><a href="#打乱数组" class="headerlink" title="打乱数组"></a>打乱数组</h2><p>二分交换a1,a2 and b1,b2<br>使用random算random index然后swap</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Divide-amp-Recursion-amp-Conquer&quot;&gt;&lt;a href=&quot;#Divide-amp-Recursion-amp-Conquer&quot; class=&quot;headerlink&quot; title=&quot;Divide &amp;amp; Recursion &amp;amp;
    
    </summary>
    
      <category term="Algo" scheme="http://lycworks.me/blog/categories/Algo/"/>
    
    
      <category term="dc" scheme="http://lycworks.me/blog/tags/dc/"/>
    
  </entry>
  
  <entry>
    <title>MATRIX与我的爱恨情仇</title>
    <link href="http://lycworks.me/blog/2017/02/01/matrix/"/>
    <id>http://lycworks.me/blog/2017/02/01/matrix/</id>
    <published>2017-02-01T05:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="matrix-w-o-dfs"><a href="#matrix-w-o-dfs" class="headerlink" title="matrix w/o dfs"></a>matrix w/o dfs</h1><h3 id="只是遍历即可"><a href="#只是遍历即可" class="headerlink" title="只是遍历即可"></a>只是遍历即可</h3><blockquote>
<blockquote>
<p><a href="http://pythontutor.com/visualize.html#code=def%20spiralMatrix%28matrix%29%3A%0A%20%20%20%20pos%20%3D%200%0A%20%20%20%20oldpos%20%3D%20pos%0A%20%20%20%20m%20%3D%20len%28matrix%29%0A%20%20%20%20n%20%3D%20len%28matrix%5B0%5D%29%0A%20%20%20%20res%20%3D%20%5Bfloat%28&#39;-inf&#39;%29%5D%0A%20%20%20%20level%20%3D%20min%28m,n%29%20%23how%20many%20spirals%0A%20%20%20%20while%20pos%3Clevel%3A%0A%20%20%20%20%20%20%20%20%23row%20traversal%0A%20%20%20%20%20%20%20%20for%20j%20in%20range%28pos,%20n-pos%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20matrix%5Bpos%5D%5Bj%5D!%3Dres%5B-1%5D%3A%0A%20%20%20%20%20%20%20%20%09%20%20%20%20res.append%28matrix%5Bpos%5D%5Bj%5D%29%20%23rowstart%201,2,3%0A%20%20%20%20%20%20%20%20%23col%20traversal%0A%20%20%20%20%20%20%20%20for%20i%20in%20range%28pos,%20m-pos%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20matrix%5Bi%5D%5Bn-pos-1%5D!%3Dres%5B-1%5D%3A%0A%20%20%20%20%20%20%20%20%09%20%20%20%20res.append%28matrix%5Bi%5D%5Bn-pos-1%5D%29%20%23colend%203,6,9%0A%20%20%20%20%20%20%20%20%23row%20traversal%0A%20%20%20%20%20%20%20%20for%20j%20in%20range%28n-pos-1,pos,-1%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20matrix%5Bm-pos-1%5D%5Bj%5D!%3Dres%5B-1%5D%3A%0A%20%20%20%20%20%20%20%20%09%20%20%20%20res.append%28matrix%5Bm-pos-1%5D%5Bj%5D%29%20%23rowend%2087%0A%20%20%20%20%20%20%20%20%23col%20traversal%0A%20%20%20%20%20%20%20%20for%20i%20in%20range%28m-pos-1,pos,-1%29%3A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20matrix%5Bi%5D%5Bpos%5D!%3Dres%5B-1%5D%3A%0A%20%20%20%20%20%20%20%20%09%20%20%20%20res.append%28matrix%5Bi%5D%5Bpos%5D%29%20%23colstart%204%0A%20%20%20%20%20%20%20%20%23skip%20repeat%0A%20%20%20%20%20%20%20%20pos%2B%3D1%0A%20%20%20%20return%20res%5B1%3A%5D%0A%20%20%20%20%20%20%20%20%0AspiralMatrix%28%5B%5B1,2,3%5D,%5B4,0,-1%5D,%5B7,8,9%5D%5D%29%0A&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=2&amp;rawInputLstJSON=%5B%5D&amp;testCasesJSON=%5B%22%5Cn%23%20assert%20%3Ctest%20condition%3E%22%5D&amp;textReferences=false" target="_blank" rel="external">spiral matrix</a>, <a href="https://goo.gl/YkWbv8" target="_blank" rel="external">generate matrix</a>  </p>
</blockquote>
</blockquote>
<p>spiral matrix - 重点找到有多少level。level的算法就是画层，横竖哪个小就是哪个<br>generate matrix - level是n给了，重点是重复的横向row和col number需要各减一次  </p>
<h3 id="用heap吧-python自带这么好用不用多可惜"><a href="#用heap吧-python自带这么好用不用多可惜" class="headerlink" title="用heap吧 python自带这么好用不用多可惜"></a>用heap吧 python自带这么好用不用多可惜</h3><blockquote>
<blockquote>
<p>kth smallest num in matrix -&gt; step1 flatten step2 heapify step3 duh  </p>
</blockquote>
</blockquote>
<p><strong><em>flatten the array</em></strong><br><code>[flatten for sublist in myarray for flatten in sublist]</code> 绕口令。。  </p>
<h3 id="setzeros"><a href="#setzeros" class="headerlink" title="setzeros"></a>setzeros</h3><blockquote>
<blockquote>
<p>bombman, set matrix zeroes  </p>
</blockquote>
</blockquote>
<p>set matrix zeroes - 方法用第一排的横竖记录有没有0，然后第二次loop的时候改</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;matrix-w-o-dfs&quot;&gt;&lt;a href=&quot;#matrix-w-o-dfs&quot; class=&quot;headerlink&quot; title=&quot;matrix w/o dfs&quot;&gt;&lt;/a&gt;matrix w/o dfs&lt;/h1&gt;&lt;h3 id=&quot;只是遍历即可&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Algo" scheme="http://lycworks.me/blog/categories/Algo/"/>
    
    
      <category term="matrix" scheme="http://lycworks.me/blog/tags/matrix/"/>
    
      <category term="dfs" scheme="http://lycworks.me/blog/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://lycworks.me/blog/2017/02/01/dp/"/>
    <id>http://lycworks.me/blog/2017/02/01/dp/</id>
    <published>2017-02-01T05:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DP类型"><a href="#DP类型" class="headerlink" title="DP类型"></a>DP类型</h1><ul>
<li><p>状态转移 <code>dp[x+y]+=dp[x]</code><br>转<br>当你遇到第n+1个数x_n+1的时候，前n+1个数中最大值是什么呢，就是拿这个新x去和之前那个max比，然后留下较大的一个，对吧，写下来就是<br><code>Max_n+1 = (x_n+1 &gt; Max_n) ? x_n+1 : Max_n</code> #if choose add to current max else not choose  </p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题 ."></a>例题 .</h1><h3 id="combinationsum"><a href="#combinationsum" class="headerlink" title="combinationsum ."></a>combinationsum .</h3><h3 id="max-sum-subarray-Kadane’s"><a href="#max-sum-subarray-Kadane’s" class="headerlink" title="max sum subarray Kadane’s ."></a>max sum subarray Kadane’s .</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def maxSum(arr):</div><div class="line">  prevSum = nums[0]</div><div class="line">  maxmax = nums[0]</div><div class="line">  del arr[0]</div><div class="line">  for num in nums:</div><div class="line">    prevSum = max(prevSum+num, num) #compare cursum and curnum</div><div class="line">    maxSum = max(maxSum, prevSum)</div><div class="line">  return maxSum</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="follow-up-from-max-subarray"><a href="#follow-up-from-max-subarray" class="headerlink" title="follow up from max subarray ."></a>follow up from max subarray .</h4><ul>
<li><p>max product subarray - when it is negative, swap max and min continuous product . </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def maxProduct(arr):</div><div class="line">  prevSum = nums[0]</div><div class="line">  maxProduct = nums[0]</div><div class="line">  minProduct = nums[0]</div><div class="line">  maxmax = nums[0]</div><div class="line">  del arr[0]</div><div class="line">  for num in nums:</div><div class="line">    if num&lt;0:</div><div class="line">      #swap because -*- is happening</div><div class="line">      maxProduct, minProduct = minProduct, maxProduct</div><div class="line">    maxProduct = max(num, maxProduct*num)</div><div class="line">    minProduct = min(num, minProduct*num)</div><div class="line">    maxmax = max(maxmax, maxProduct)</div><div class="line">  return maxmax</div></pre></td></tr></table></figure>
</li>
<li><p>Robber</p>
</li>
<li>stocks</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DP类型&quot;&gt;&lt;a href=&quot;#DP类型&quot; class=&quot;headerlink&quot; title=&quot;DP类型&quot;&gt;&lt;/a&gt;DP类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态转移 &lt;code&gt;dp[x+y]+=dp[x]&lt;/code&gt;&lt;br&gt;转&lt;br&gt;当你遇到第n+1个数x_
    
    </summary>
    
      <category term="Algo" scheme="http://lycworks.me/blog/categories/Algo/"/>
    
    
      <category term="dp" scheme="http://lycworks.me/blog/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://lycworks.me/blog/2016/08/08/json/"/>
    <id>http://lycworks.me/blog/2016/08/08/json/</id>
    <published>2016-08-08T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="JSON-gt-String"><a href="#JSON-gt-String" class="headerlink" title="JSON -&gt; String"></a>JSON -&gt; String</h1><p>function  </p>
<ul>
<li>stringify (parse into string representation, has <code>pretty print</code>)  </li>
<li>parse (parse string into JSON)  <blockquote>
<p>convert opposite ways  </p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;JSON-gt-String&quot;&gt;&lt;a href=&quot;#JSON-gt-String&quot; class=&quot;headerlink&quot; title=&quot;JSON -&amp;gt; String&quot;&gt;&lt;/a&gt;JSON -&amp;gt; String&lt;/h1&gt;&lt;p&gt;function  &lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AI笔记</title>
    <link href="http://lycworks.me/blog/2016/08/03/AI-note/"/>
    <id>http://lycworks.me/blog/2016/08/03/AI-note/</id>
    <published>2016-08-03T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="AI-V-PS"><a href="#AI-V-PS" class="headerlink" title="AI V PS"></a>AI V PS</h1><ul>
<li>AI is resolution-independent, meaning its resolution is unaffected with zooming. In AI, images are vectors that are<br>mathematically calculated when zooming.  </li>
</ul>
<h1 id="Hotkeys"><a href="#Hotkeys" class="headerlink" title="Hotkeys"></a>Hotkeys</h1><p><code>CTRL + K</code>- preference<br><code>CAPS LOCK</code>- change all to precise cursor ‘+’<br><code>CTRL + R</code>- ruler<br><code>CTRL + 0</code>- fit on screen, <code>CTRL + 1</code>- fit 100%  </p>
<h1 id="Start-with-An-End-of-Mind"><a href="#Start-with-An-End-of-Mind" class="headerlink" title="Start with An End of Mind"></a>Start with An End of Mind</h1><p><code>what is it for</code></p>
<h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><h4 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h4><ul>
<li>bleed (cut line for printing edge)  </li>
<li>PPI (300 press-rasterize standard)  </li>
</ul>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul>
<li>Object align to invisible grid  </li>
<li>PPI 72 for screen standard  </li>
</ul>
<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><code>CTRL + Y</code>- outline toggle<br><code>SHIFT + CTRL + Y</code>- pixel preview (for the screen)<br><code>View-&gt;proof set up</code>- preview color blend in rgb and cmyk  </p>
<p><code>ALT + click</code> - to change area of selection (eg in transform)<br><code>CTRL + click</code> - V select underlied item (eg arm under a shirt)  </p>
<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><h3 id="Ruler-Manipulation"><a href="#Ruler-Manipulation" class="headerlink" title="Ruler Manipulation"></a>Ruler Manipulation</h3><p>Top left corner drag to set genesis (0) point<br>with ctrl, easier to do the second drag  </p>
<h3 id="Object-view-selection"><a href="#Object-view-selection" class="headerlink" title="Object view selection"></a>Object view selection</h3><p>views can be created to switch between customized views (often for complicated vectors)  </p>
<h1 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h1><p>V select - normal group select (if group exist)<br>A direct select - group item select (if choose group selection tool, each click select one upper nested level)  </p>
<h3 id="strategy"><a href="#strategy" class="headerlink" title="strategy"></a>strategy</h3><p>use direct select for embedded item or double click in V selection to go to isolation (quit using esc)  </p>
<h1 id="Rotate-amp-Scale"><a href="#Rotate-amp-Scale" class="headerlink" title="Rotate &amp; Scale"></a>Rotate &amp; Scale</h1><p>simply click to create anchor point and drag to manipulate scale/rotation  </p>
<blockquote>
<p>use alt click to edit anchor point setting<br>command + D to repeat the last thing (eg creating 360 flower)  </p>
</blockquote>
<h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><p>width - change width, warp - finger paint, wrinkle - melt effect  </p>
<h1 id="Color-Manipulation"><a href="#Color-Manipulation" class="headerlink" title="Color Manipulation"></a>Color Manipulation</h1><h3 id="RGB-V-CMYK"><a href="#RGB-V-CMYK" class="headerlink" title="RGB V CMYK"></a>RGB V CMYK</h3><p><code>RGB</code>- color addictive, ‘world of light’/screen<br><code>CMYK</code>- color subtractive, ‘world of absorption’/print press  </p>
<p>Color guide - palette inspiration<br>Color Swatches - drag to add or add group. Export as ASE OR AI<br><code>ALT + DEL</code> - to force delete  </p>
<h3 id="GLOBAL-processing-and-spot-color"><a href="#GLOBAL-processing-and-spot-color" class="headerlink" title="GLOBAL processing and spot color"></a>GLOBAL processing and spot color</h3><p>double click color, if global, color attached to object woho  </p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;AI-V-PS&quot;&gt;&lt;a href=&quot;#AI-V-PS&quot; class=&quot;headerlink&quot; title=&quot;AI V PS&quot;&gt;&lt;/a&gt;AI V PS&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;AI is resolution-independent, meaning i
    
    </summary>
    
      <category term="Media" scheme="http://lycworks.me/blog/categories/Media/"/>
    
    
      <category term="illustrator, image_manipulation" scheme="http://lycworks.me/blog/tags/illustrator-image-manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Jade笔记</title>
    <link href="http://lycworks.me/blog/2016/07/20/jade/"/>
    <id>http://lycworks.me/blog/2016/07/20/jade/</id>
    <published>2016-07-20T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h4 id="resource-http-naltatis-github-io-jade-syntax-docs"><a href="#resource-http-naltatis-github-io-jade-syntax-docs" class="headerlink" title="resource http://naltatis.github.io/jade-syntax-docs/"></a>resource <code>http://naltatis.github.io/jade-syntax-docs/</code></h4><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><p>npm install pug -g<br>pug index.jade 编译文件 render to html<br>pug -P index.jade 编译成带格式的html文件 render to pretty html<br>pug -P -w index.jade 实时编译 watch jade and render html  </p>
<h1 id="Jade-Basic"><a href="#Jade-Basic" class="headerlink" title="Jade Basic"></a>Jade Basic</h1><ul>
<li>tags标签<br>直接在元素名称后加.类名和#ID名 e.g. p#id.class<br>放在(属性名=‘属性值’)小括号中 <code>p(class=&#39;text-center&#39; data-value=&#39;lala&#39;)</code><br>div标签可以省略 .im-a-div(data-type=’div’)  </li>
<li><p>多行文本<br><code>.</code>  </p>
<pre><code>p.
    im first line
    im second line
</code></pre></li>
</ul>
<p><code>|</code>  </p>
<pre><code>p  
    |im first 
    |im second
</code></pre><ul>
<li><p>注释comment<br>//单行注释： 解析为<code>&lt;!--单行注释--&gt;</code><br>//- 非缓冲,多行: 不显示在编译后的rendered html  </p>
</li>
<li><p>变量variable<br>inline变量声明 <code>- var name = Bob</code><br>引用变量 <code>#{name}</code><br>变量优先级- 文档中变量比外面传进来的变量优先级高<br>普遍用法  </p>
<blockquote>
<p>cmd传递数据加载json文件 <code>jade index.jade -P -w -O data.json</code><br>express render  </p>
</blockquote>
<pre><code>express.set(&apos;view-engine&apos;,&apos;jade&apos;);
express.render(&apos;jadefile&apos;,&apos;{whatever json obj}&apos; 
</code></pre></li>
<li><p>转译Escaping  </p>
<pre><code>- var data = &apos;&lt;script&gt;..&lt;/script&gt;&apos;  
p #{data} or p= data =&gt; &apos;&lt;script&gt;..&apos; 
p !{data} or p!= data =&gt; &lt;script&gt;..&lt;/script&gt;  
p \#{data} =&gt; &apos;#{data}&apos; 
</code></pre></li>
</ul>
<blockquote>
<p>如果没有值，则返回undefined  </p>
</blockquote>
<h1 id="Jade-Mixin"><a href="#Jade-Mixin" class="headerlink" title="Jade Mixin"></a>Jade Mixin</h1><p><img src="http://img.mukewang.com/57037ccb0001a47412800720.jpg" alt="mixin examples">  </p>
<h1 id="Jade-Inheritance-amp-include"><a href="#Jade-Inheritance-amp-include" class="headerlink" title="Jade Inheritance &amp; include"></a>Jade Inheritance &amp; include</h1><p>-模板继承<br>layout.jade中定义了多个bock<br>index.jade中，extends继承layout.jade，填充相应的block  </p>
<pre><code>-- layout.jade --
doctype html
&lt;!--[if IE 8]&gt;&lt;html class=&apos;ie8&apos;&gt;&lt;![endif]--&gt;
&lt;!--[if IE 9]&gt;&lt;html class=&apos;ie9&apos;&gt;&lt;![endif]--&gt;
&lt;!--[if !IE]&gt;&lt;!--&gt;&lt;html&gt;&lt;!--&lt;![endif]--&gt;
head
    include head //-包含head.jade
body
    block desc //-可被覆盖
        p desc from layout
    block content
&lt;/html&gt;

-- index.jade --
extends layout

block content
    h3 im a block 
    block desc
        p desc from index
</code></pre><ul>
<li>模板包含  </li>
</ul>
<blockquote>
<p>include 也可引入原生的html页面  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;resource-http-naltatis-github-io-jade-syntax-docs&quot;&gt;&lt;a href=&quot;#resource-http-naltatis-github-io-jade-syntax-docs&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Snap.SVG</title>
    <link href="http://lycworks.me/blog/2016/07/14/svg/"/>
    <id>http://lycworks.me/blog/2016/07/14/svg/</id>
    <published>2016-07-14T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="Snap-SVG"><a href="#Snap-SVG" class="headerlink" title="Snap.SVG"></a>Snap.SVG</h1><p>clear<br>        var s = Snap(‘css selector’)<br>        Snap.load(‘whatever.svg’, function(fragment){<br>            s.clear()<br>        })</p>
<p>get element  </p>
<pre><code>myRect.attr(&apos;id&apos;);
</code></pre><p>set element<br>        myRect.attr({<br>            id: ‘newid’<br>        })</p>
<p>click callback  </p>
<pre><code>var clickCallback = function(event) {
    this.attr({ fill: &apos;blue&apos; });
};

myRect.click(clickCallback);
</code></pre><p>timer example <a href="https://codepen.io/rachsmith/pen/BqpCd?editors=0010" target="_blank" rel="external">https://codepen.io/rachsmith/pen/BqpCd?editors=0010</a><br>basics <a href="http://webdesign.tutsplus.com/articles/how-to-manipulate-and-animate-svg-with-snapsvg--cms-21323" target="_blank" rel="external">http://webdesign.tutsplus.com/articles/how-to-manipulate-and-animate-svg-with-snapsvg--cms-21323</a><br><a href="http://unicorn-ui.com/blog/intermediate-svg.html" target="_blank" rel="external">http://unicorn-ui.com/blog/intermediate-svg.html</a>, <a href="https://www.sitepoint.com/advanced-snap-svg/" target="_blank" rel="external">https://www.sitepoint.com/advanced-snap-svg/</a>, <a href="http://nocircleno.com/blog/getting-starting-with-svg-and-javascript/" target="_blank" rel="external">http://nocircleno.com/blog/getting-starting-with-svg-and-javascript/</a><br>animation - all <a href="https://codyhouse.co/gem/animate-svg-icons-with-css-and-snap/" target="_blank" rel="external">https://codyhouse.co/gem/animate-svg-icons-with-css-and-snap/</a>, <a href="https://davidwalsh.name/svg-animations-snap" target="_blank" rel="external">https://davidwalsh.name/svg-animations-snap</a><br>animation - path <a href="https://codepen.io/JRGould/pen/dkHhw?editors=0010" target="_blank" rel="external">https://codepen.io/JRGould/pen/dkHhw?editors=0010</a><br>masking exmaple <a href="http://jsfiddle.net/5826ywh7/3/" target="_blank" rel="external">http://jsfiddle.net/5826ywh7/3/</a><br>callback within Snap.load <a href="http://stackoverflow.com/questions/26465119/why-when-i-add-function-into-snap-load-loading-svg-my-method-i-cannot" target="_blank" rel="external">http://stackoverflow.com/questions/26465119/why-when-i-add-function-into-snap-load-loading-svg-my-method-i-cannot</a>  </p>
<p>more examples <a href="https://www.raymondcamden.com/2013/11/06/Want-help-with-Snapsvg-And-a-few-more-examples/" target="_blank" rel="external">https://www.raymondcamden.com/2013/11/06/Want-help-with-Snapsvg-And-a-few-more-examples/</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Snap-SVG&quot;&gt;&lt;a href=&quot;#Snap-SVG&quot; class=&quot;headerlink&quot; title=&quot;Snap.SVG&quot;&gt;&lt;/a&gt;Snap.SVG&lt;/h1&gt;&lt;p&gt;clear&lt;br&gt;        var s = Snap(‘css select
    
    </summary>
    
      <category term="SVG" scheme="http://lycworks.me/blog/categories/SVG/"/>
    
    
      <category term="snap.svg, svg" scheme="http://lycworks.me/blog/tags/snap-svg-svg/"/>
    
  </entry>
  
  <entry>
    <title>ProgressBar.js Doughnut Chart</title>
    <link href="http://lycworks.me/blog/2016/07/11/chart-progressbar/"/>
    <id>http://lycworks.me/blog/2016/07/11/chart-progressbar/</id>
    <published>2016-07-11T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><pre><code>// progressbar.js@1.0.0 version is used
// Docs: http://progressbarjs.readthedocs.org/en/1.0.0/
// drawChart(&apos;By You&apos;, chart1, i1);
// drawChart(&apos;By Others&apos;, chart2, i2);

function drawChart(str,id,val){
     var bar = new ProgressBar.Circle(id, {
       color: &apos;#373f51&apos;,
       // This has to be the same size as the maximum width to
       // prevent clipping
       strokeWidth: 4,
       trailWidth: 4,
       easing: &apos;easeInOut&apos;,
       duration: 1400,
       text: {
         autoStyleContainer: false
       },
       from: { color: &apos;#a9bcd0&apos;, width: 4 },
       to: { color: &apos;#a9bcd0&apos;, width: 4 },
       // Set default step function for all animate calls
       step: function(state, circle) {
         circle.path.setAttribute(&apos;stroke&apos;, state.color);
         circle.path.setAttribute(&apos;stroke-width&apos;, state.width);

         var value = Math.round(circle.value() * 100);
         if (value === 0) {
           circle.setText(&apos;&apos;);
         } else {
           circle.setText(&apos;&lt;center&gt;&apos;+value+&apos;%&lt;/center&gt;\n&apos;+str);
         }

       }
     });
     // bar.text.style.fontFamily = &apos;&quot;Raleway&quot;, Helvetica, sans-serif&apos;;
     bar.text.style.fontSize = &apos;1rem&apos;;
     bar.text.style.lineHeight = &apos;30px&apos;;
     var value = val/total;
     bar.animate(value);  // Number from 0.0 to 1.0
} //for progressbar
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;CODE&quot;&gt;&lt;a href=&quot;#CODE&quot; class=&quot;headerlink&quot; title=&quot;CODE&quot;&gt;&lt;/a&gt;CODE&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// progressbar.js@1.0.0 version is used
// Docs: 
    
    </summary>
    
      <category term="JS" scheme="http://lycworks.me/blog/categories/JS/"/>
    
    
      <category term="chart,JS" scheme="http://lycworks.me/blog/tags/chart-JS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5特性</title>
    <link href="http://lycworks.me/blog/2016/07/09/html5-tricks/"/>
    <id>http://lycworks.me/blog/2016/07/09/html5-tricks/</id>
    <published>2016-07-09T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="data-name"><a href="#data-name" class="headerlink" title="data-name"></a>data-name</h1><blockquote>
<p>‘a great marriage of server side and client side’ -Stephen Calvert, Quora<br>resources: <a href="https://www.quora.com/What-is-the-best-way-to-pass-server-side-variables-to-client-side-JavaScript" target="_blank" rel="external">https://www.quora.com/What-is-the-best-way-to-pass-server-side-variables-to-client-side-JavaScript</a>  </p>
</blockquote>
<h3 id="HTML-lt-div-id-quot-mydiv-quot-data-myval-quot-10-quot-gt-lt-div-gt"><a href="#HTML-lt-div-id-quot-mydiv-quot-data-myval-quot-10-quot-gt-lt-div-gt" class="headerlink" title="HTML- &lt;div id=&quot;mydiv&quot;data-myval=&quot;10&quot;&gt;&lt;/div&gt;"></a>HTML- <code>&lt;div id=&quot;mydiv&quot;</code>data-myval<code>=&quot;10&quot;&gt;&lt;/div&gt;</code></h3><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ul>
<li><code>var a = $(&#39;#mydiv&#39;).data(&#39;myval&#39;);</code> //getter  </li>
<li><code>$(&#39;#mydiv&#39;).data(&#39;myval&#39;,20);</code> //setter  </li>
</ul>
<blockquote>
<p>For older browser, use  <code>var myval = element.getAttribute(&#39;data-myval&#39;);</code>  </p>
</blockquote>
<h3 id="Or-merely-use-config-as-json-object"><a href="#Or-merely-use-config-as-json-object" class="headerlink" title="Or merely use config as json object"></a>Or merely use config as json object</h3><pre><code>config = {
    userName: &apos;Scott Patten&apos;,
    userLogin: &apos;spatten&apos;,
    hasBoughtCurrentBook: true,
    followers: [&apos;peterarmstrong&apos;, &apos;rolandtanglao&apos;]
};
</code></pre><h3 id="Advance-way"><a href="#Advance-way" class="headerlink" title="Advance way"></a>Advance way</h3><p>(<a href="https://teamtreehouse.com/community/how-do-i-make-a-variable-passed-to-a-jade-template-by-an-express-route-accessible-for-use-in-js-on-the-rendered-page" target="_blank" rel="external">https://teamtreehouse.com/community/how-do-i-make-a-variable-passed-to-a-jade-template-by-an-express-route-accessible-for-use-in-js-on-the-rendered-page</a>)  </p>
<ul>
<li><p>1)On the server side javascript file you put the object as a JSON string on the request  </p>
<pre><code>res.render(&apos;index&apos;, { workflowData_server: JSON.stringify(workflowData) });
</code></pre></li>
<li><p>2) on the template view file,for example index.jade file you put script<br>var workflowData_client = !{workflowData_server} the ! is needed to unescape it to html  </p>
</li>
<li><p>3) now you can use the workflowData_client on your client javascript file,<br>for example a public/angular.js file  </p>
<pre><code>angular.module(&apos;TestApp&apos;, []); angular.module(&apos;TestApp&apos;) .controller(&apos;MainController&apos;, ctrlFunc);

function ctrlFunc() { this.workflowData = workflowData_client; }
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;data-name&quot;&gt;&lt;a href=&quot;#data-name&quot; class=&quot;headerlink&quot; title=&quot;data-name&quot;&gt;&lt;/a&gt;data-name&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;‘a great marriage of ser
    
    </summary>
    
      <category term="HTML" scheme="http://lycworks.me/blog/categories/HTML/"/>
    
    
      <category term="data_passing, view_render" scheme="http://lycworks.me/blog/tags/data-passing-view-render/"/>
    
  </entry>
  
  <entry>
    <title>CSS grid方法</title>
    <link href="http://lycworks.me/blog/2016/07/09/css-grid/"/>
    <id>http://lycworks.me/blog/2016/07/09/css-grid/</id>
    <published>2016-07-09T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<pre><code>/*container*/
.content{
    padding: 0;
}

ul.posts{
    background: aliceblue;
    width: 100%;
}
ul.posts li {
    float: left;
    margin: 0;
    display: inline-block;
    width: 33.3%;
    min-height: 200px;
    text-align: center;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    vertical-align: top;
    zoom: 1;
}
ul.posts li a{
    /*     display:block; */
    margin:0;
    color: #333;
    font-weight: 600;
    font-size: 20pt;
}

ul.posts li:hover{
    background: rgba(255,255,255,0.5);
    border: 10px solid rgba(255,255,255,0.01)
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;pre&gt;&lt;code&gt;/*container*/
.content{
    padding: 0;
}

ul.posts{
    background: aliceblue;
    width: 100%;
}
ul.posts li {
    float: 
    
    </summary>
    
      <category term="CSS" scheme="http://lycworks.me/blog/categories/CSS/"/>
    
    
      <category term="grid" scheme="http://lycworks.me/blog/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://lycworks.me/blog/2016/07/06/git-note/"/>
    <id>http://lycworks.me/blog/2016/07/06/git-note/</id>
    <published>2016-07-06T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><p>source: <a href="http://huangziwei.com/tech/blogging-with-git-github-and-jekyll/" target="_blank" rel="external">http://huangziwei.com/tech/blogging-with-git-github-and-jekyll/</a><br><code>git remote -v</code>, <code>git remote show origin</code> - 检测文件夹是否已绑定远程库(remote repository)<br><code>git remote add origin &lt;remote git repository&gt;</code> - 绑定fork的远程库<br><code>git checkout &lt;file to ignore&gt;</code><br><code>git checkout -b|--orphan &lt;branchname&gt;</code> - normal|disconnected branch  </p>
<h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p>source: <a href="https://www.atlassian.com/git/tutorials/using-branches/git-branch" target="_blank" rel="external">https://www.atlassian.com/git/tutorials/using-branches/git-branch</a>  </p>
<h2 id="Submodules-使用副项目并随时得到更新"><a href="#Submodules-使用副项目并随时得到更新" class="headerlink" title="Submodules　使用副项目并随时得到更新"></a>Submodules　使用副项目并随时得到更新</h2><p>source: <a href="https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407#.kcyfdl2xi" target="_blank" rel="external">https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407#.kcyfdl2xi</a>, <a href="http://johnleach.co.uk/words/323/git-submodules-in-n-easy-steps" target="_blank" rel="external">http://johnleach.co.uk/words/323/git-submodules-in-n-easy-steps</a>, <a href="https://johnleach.co.uk/words/323" target="_blank" rel="external">https://johnleach.co.uk/words/323</a>,<br><a href="https://blog.jacius.info/git-submodule-cheat-sheet/" target="_blank" rel="external">https://blog.jacius.info/git-submodule-cheat-sheet/</a>, <a href="http://blog.chh.tw/posts/git-submodule/" target="_blank" rel="external">http://blog.chh.tw/posts/git-submodule/</a>, <a href="http://springok-blog.logdown.com/posts/2015/11/06/submodule-on-github-subproject-troubleshooting" target="_blank" rel="external">http://springok-blog.logdown.com/posts/2015/11/06/submodule-on-github-subproject-troubleshooting</a></p>
<pre><code>git submodule add &lt;others .git repository&gt; &lt;myfolder&gt; 
-- set up .gitmodules for myfolder      
git commit .gitmodules &lt;myfolder&gt; -m &quot;a message&quot;  
git push

# after cloning tree, fetch all submodules  
git submodule init Submodule &apos;myfolder&apos;  
git submodule update    

# updating submodule  
cd myfolder &amp;&amp; git pull [from others] &amp;&amp; git add myfolder &amp;&amp; commit    

# making changes to your submodule  
cd myfolder &amp;&amp; git checkout master [do changes in that branch]  
git commit -a -m &quot;fix a bug&quot; &amp;&amp; push  
cd .. &amp;&amp; git add myfolder &amp;&amp; commit -m &quot;updated myfolder&quot;  
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Basic-Commands&quot;&gt;&lt;a href=&quot;#Basic-Commands&quot; class=&quot;headerlink&quot; title=&quot;Basic Commands&quot;&gt;&lt;/a&gt;Basic Commands&lt;/h2&gt;&lt;p&gt;source: &lt;a href=&quot;
    
    </summary>
    
      <category term="CLI stuff" scheme="http://lycworks.me/blog/categories/CLI-stuff/"/>
    
    
      <category term="git" scheme="http://lycworks.me/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CSS Trick</title>
    <link href="http://lycworks.me/blog/2016/06/26/CSS-tricks/"/>
    <id>http://lycworks.me/blog/2016/06/26/CSS-tricks/</id>
    <published>2016-06-26T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Horizontal-Centering-Span-that-are-absolute"><a href="#Horizontal-Centering-Span-that-are-absolute" class="headerlink" title="Horizontal Centering Span that are absolute"></a>Horizontal Centering Span that are absolute</h1><p>once absolutely positioned, it no longer follows the document flow. So the text is centered, but only inside the pink span.<br>And since it’s absolutely positioned, even if it were a div, the width would collapse.  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">solution  </div><div class="line">span  </div><div class="line">&#123;  </div><div class="line">    background-color:pink;  </div><div class="line">    left: 0;  /*&lt;-*/</div><div class="line">    width: 100%;  /*&lt;-*/  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>If you don’t want the pink to extend the full width, then you must nest an element (e.g. span) inside the positioned spans and give that element the background color, as seen here.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Horizontal-Centering-Span-that-are-absolute&quot;&gt;&lt;a href=&quot;#Horizontal-Centering-Span-that-are-absolute&quot; class=&quot;headerlink&quot; title=&quot;Horizo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS正则表达式regexexp</title>
    <link href="http://lycworks.me/blog/2016/05/20/JS-regex/"/>
    <id>http://lycworks.me/blog/2016/05/20/JS-regex/</id>
    <published>2016-05-20T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="Regex正则"><a href="#Regex正则" class="headerlink" title="Regex正则"></a>Regex正则</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><code>/</code>起始和结尾<br><code>.</code> - 代表任意，除了换行/n,/r etc<br><code>\d</code>- 0-9<br><code>\D</code>- !(0-9)<br><code>\w</code>- 0-9或a-zA-Z,_<br><code>\W</code>- !(\w)<br><code>\s</code>- 空格，tab，\n\r etc<br><code>\S</code>- !(\s)<br><code>\t\r\n\v\f</code> - tab，回车，换行，垂直|，换页  </p>
<p>范围<br>[] - 字符范围, eg [a-zA-Z]<br>[^..] - 字符意外<br>^ - 行首<br>$ - 行尾<br><code>\b</code> - 零宽单词边界 eg ‘a no’<br><code>\B</code> - !(\b)  </p>
<p>符号<br><code>\</code> - escape符号  </p>
<p>分组<br><code>(x)</code>, <code>\n</code> - e.g. (abc)\n 表示abc再重复n次<br><code>(?:x)</code> - 仅分组，重复没有效果 eg <code>(?:abc)(def)\1.test(&#39;abcdefdef&#39;)</code>  </p>
<p>重复<br>贪婪算法 x<em> &gt;=0, x+ &gt;=1<br>eg abc</em> 匹配 ab, abc, abccccc<br>   abc+ 匹配 abc,abccccc  </p>
<p>非贪婪算法 x<em>? == 0, x+? ==1<br>  eg abc</em>? 匹配 ab<br>     abc+? 匹配 abc  </p>
<p>x? 出现0或1次<br>x|y x或y<br>  eg ab|cd|ef 匹配 ab或cd或ef<br>x{n} - 固定n次<br>x(n,) - &gt;= n次<br>x(n,m) - n-m次  </p>
<p>标志类flag  gim<br>g - global<br>i - ignoreCase<br>m - multiline - 跨行检索  </p>
<h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p>.search(regex) - 返回找到位置index<br>.replace(regex,replacement)<br>.match(regex) - 返回匹配结果数组<br>.split(regex) - 返回数组</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://regexone.com/lesson/kleene_operators?" target="_blank" rel="external">http://regexone.com/lesson/kleene_operators?</a> 练习站<br><a href="https://developers.google.com/edu/python/regular-expressions" target="_blank" rel="external">https://developers.google.com/edu/python/regular-expressions</a> 教程<br><a href="http://pythex.org/" target="_blank" rel="external">http://pythex.org/</a> python正则练习站</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Regex正则&quot;&gt;&lt;a href=&quot;#Regex正则&quot; class=&quot;headerlink&quot; title=&quot;Regex正则&quot;&gt;&lt;/a&gt;Regex正则&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS OOP</title>
    <link href="http://lycworks.me/blog/2016/05/20/JS-OOP/"/>
    <id>http://lycworks.me/blog/2016/05/20/JS-OOP/</id>
    <published>2016-05-20T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>key: 继承，封装，多态，抽象  </p>
<h2 id="基于原型的继承"><a href="#基于原型的继承" class="headerlink" title="基于原型的继承"></a>基于原型的继承</h2><p><img src="http://img.mukewang.com/56f9f2c9000151f812800720.jpg" alt="&quot;protochain&quot;"></p>
<p>Prototype - 预设的属性，并可以chain更多的属性<code>Foo.prototype.x = 1</code><br>原型 - 对象上的原型，构造器的prototype属性<code>__proto__</code>指向prototype  </p>
<blockquote>
<p><em>proto</em>是实例对象的一个引用<br>而prototype是一个构造器的属性对象<br>每个属性对象里有一个<em>proto</em>引用  </p>
</blockquote>
<pre><code>function Person(name,age){
    this.name = name
    this.age = age
}

Person.prototype.hi = function(){
    console.log(&quot;Hi my name is &quot;+this.name+&quot;,I&apos;m &quot;+this.age+&quot; years old now&quot;)
}

Person.prototype.legs = 2
Person.prototype.arms = 2
Person.prototype.walk = function(){
    console.log(this.name+&quot;is walking..&quot;)
}

function Student(name,age,className){
    Person.call(this,name,age)//create a person this
    this.className = className
}

//拿到person的原型来建学生的原型
Student.prototype = Object.create(Person.prototype)//创建一个空对象并且原型指向参数。
//如果直接赋值student.prototype = person.prototype
//student添加自己的方法时person也会添加同样的方法..
Student.prototype.constructor = Student//如果不设置，constructor指向person

//覆盖person.hi()，因为prototype从下往上查找，找到就不找了科科
Student.prototype.hi = function(){
    console.log(&quot;Hi my name is &quot;+this.name+&quot;,I&apos;m &quot;+this.age+&quot; years old now, and from &quot;+this.className+&quot;.&quot;)
}

Student.prototype.learn = function(subject){
    console.log(this.name+&quot; is learning &quot;+subject+&quot; at &quot;+this.className)
}

var bosn = new Student(&apos;Bosn&apos;,27,&apos;Class 3, Grade 2&apos;)
bosn.hi()
console.log(bosn.legs)
bosn.walk()
bosn.learn(&apos;math&apos;)
</code></pre><p>查看原型<br>foo.<code>__proto__</code> 或者Object.getPrototypeOf(foo) 是不是 === Object.prototype  </p>
<blockquote>
<p>bind返回的变量没有prototype<br>Object.create(null)没有prototype，<code>__proto__</code>  </p>
</blockquote>
<p>修改prototype<br>动态修改prototype属性<code>Student.prototype.x</code>会影响已创建和新创建的实例的。<br>修改整个prototype赋值给新的对象对已经创建的实例没有影响，会影响<strong>新</strong>创建的实例。<br><code>Student.prototype = {y:2}, 但是bosn还是有以前继承的x属性，但是新的nanny就不会有x了</code>  </p>
<h1 id="new构造器vobject-create建造的prototype"><a href="#new构造器vobject-create建造的prototype" class="headerlink" title="new构造器vobject.create建造的prototype"></a>new构造器vobject.create建造的prototype</h1><pre><code>Student.prototype = new Person()的问题 - 在有函数的情况下，会很模糊科科  
Student.prototype = new Person(&apos;mary&apos;,&apos;the only student keke&apos;)  
最好的办法就是Object.create创建**空对象**并指向参数Person.prototype  
图片右边是ES5以下兼容  
</code></pre><p><img src="http://img.mukewang.com/573d2915000173be12800720.jpg" alt="&quot;img&quot;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;OOP&quot;&gt;&lt;a href=&quot;#OOP&quot; class=&quot;headerlink&quot; title=&quot;OOP&quot;&gt;&lt;/a&gt;OOP&lt;/h1&gt;&lt;p&gt;key: 继承，封装，多态，抽象  &lt;/p&gt;
&lt;h2 id=&quot;基于原型的继承&quot;&gt;&lt;a href=&quot;#基于原型的继承&quot; cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS执行上下文</title>
    <link href="http://lycworks.me/blog/2016/05/20/JS-EC/"/>
    <id>http://lycworks.me/blog/2016/05/20/JS-EC/</id>
    <published>2016-05-20T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h1><p>而javascript的函数进入执行上下文,里面的局部变量是保存在堆中的一个对象中(VO)  </p>
<h2 id="execution-context-上下文-EC"><a href="#execution-context-上下文-EC" class="headerlink" title="execution context - 上下文/EC"></a>execution context - 上下文/EC</h2><p>  站级结构 Ec3-&gt;2-&gt;1-&gt;global<br>  随着函数的重复调用，会创建新的上下文  </p>
<h2 id="variable-object-变量对象-VO"><a href="#variable-object-变量对象-VO" class="headerlink" title="variable object - 变量对象/VO"></a>variable object - 变量对象/VO</h2><p>  存储EC中的变量<br>  函数声明<br>  函数参数  </p>
<h2 id="激活对象-Arguments-object-AO"><a href="#激活对象-Arguments-object-AO" class="headerlink" title="激活对象 - Arguments object/AO"></a>激活对象 - Arguments object/AO</h2><p>  初始化  </p>
<h2 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h2><ol>
<li>填充顺序/初始化/declare<br>函数参数 - 未传入，初始undefined<br>函数声明 - 命名冲突会覆盖 - 解释它为什么会被前置<br>变量声明 - 初始undefined，命名冲突则忽略，因为都是undefined anyway  </li>
</ol>
<blockquote>
<p>函数表达式不会影响VO的任何填充，thus也不能外部调用<br>var obj = new foo() but foo()-&gt;undefined 科科  </p>
</blockquote>
<ol>
<li><p>代码执行<br>在函数执行前,我们已经知道此函数可以使用哪些变量了，因此直接执行里面的赋值语句<br>当函数执行完后,那么此次在堆中创建的对象就会变成匿名对象  </p>
</li>
<li><p>最终例子  </p>
</li>
</ol>
<p><img src="http://img.mukewang.com/564ae5700001338112800720.jpg" alt="&quot;test&quot;">  </p>
<p>首先，会查看函数声明，如果声明的函数名重复，则覆盖前面声明的函数。<br>接着，查看变量声明，如果变量名重复，则会忽略这次的声明。<br>填充时，不会执行赋值操作。<br>填充完毕后，开始逐行执行。  </p>
<p>填充阶段，先声明了函数x，然后变量x的声明冲突，所以被忽略；变量a、b会被声明为undefined。<br>第一行，会弹出已被赋了函数的x代码；<br>第二行，会将函数x赋值成10。  </p>
<p>区别：</p>
<pre><code>alert(x); //function x(){};
var x = 10;
function x(){};
alert(x); // 10
————————————————————
alert(x); //function x(){};
var x;
function x(){};
alert(x); //function x(){};
</code></pre><blockquote>
<p>匿名函数Anonymous function<br><code>function(){}</code>加上括号就变成了函数表达式<code>(</code>function(){}<code>)</code><br>再加个括号，就变成了立即执行函数…(function(){})<code>()</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;抽象概念&quot;&gt;&lt;a href=&quot;#抽象概念&quot; class=&quot;headerlink&quot; title=&quot;抽象概念&quot;&gt;&lt;/a&gt;抽象概念&lt;/h1&gt;&lt;p&gt;而javascript的函数进入执行上下文,里面的局部变量是保存在堆中的一个对象中(VO)  &lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS闭包</title>
    <link href="http://lycworks.me/blog/2016/05/18/JS-closure/"/>
    <id>http://lycworks.me/blog/2016/05/18/JS-closure/</id>
    <published>2016-05-18T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="作用域scope"><a href="#作用域scope" class="headerlink" title="作用域scope"></a>作用域scope</h2><p>因为JS有全局/局部变量的限制，不能从外部读取局部变量  </p>
<h3 id="Closure闭包-为了从外部读取局部变量而在函数的内部再创建的函数"><a href="#Closure闭包-为了从外部读取局部变量而在函数的内部再创建的函数" class="headerlink" title="Closure闭包 - 为了从外部读取局部变量而在函数的内部再创建的函数"></a>Closure闭包 - 为了从外部读取局部变量而在函数的内部再创建的函数</h3><blockquote>
<p>同时根据<strong>chain scope</strong>链式作用域的定义,父对象的所有变量，对子对象都是可见的，反之则不成立<br>因此直接call f1() 没有返回值，要在f1里return f2，var result = f1()，再call result()<br>或者f1里直接call f2(), 这样f1()就有返回值了</p>
</blockquote>
<pre><code>function f1(){
    var n = 1
    function f2(){console.log(n)}
    f2()                
}
f1()//1        
</code></pre><p>  闭包的第二种用途 - 让局部变量保持在内存中(localval可以连续调用)  </p>
<pre><code>function f1(){
    var n=999
    nAdd=function(){n+=1}
    function f2(){
        alert(n);
    }
    return f2;
}
var result = f1()
result()//999
nAdd()
result()// 1000
</code></pre><p>好处<br>函数有自己的作用域，定义的变量外部访问不到。封装具体的复杂的函数逻辑<br>弊端  </p>
<ul>
<li>内存消耗，解决方法是删除不使用的局部变量  </li>
<li>父函数的值会受闭包的影响  </li>
</ul>
<p>循环的陷阱 - i是全局变量，addEventListener()是一个callback函数，只有等循环结束后才会执行（i=4)。<br>解决方法是使用IEF匿名函数来立即调用闭包环境的i值  </p>
<pre><code>var i = 1        
for(;i&lt;4;i++){
    document.getElementById(&apos;div&apos;+i)
    .addEventListener(&apos;click&apos;,function(){
        console.log(i)//闭包内全是4            
    })        
}

var i = 1
for(;i&lt;4;i++){
    (function(i){//得到闭包环境的i
        document.get...//返回正常            
    })(i)        
}
</code></pre><p>公用/私用<br>  私用  </p>
<pre><code>* 封装 - 从外部看不到复杂的计算并实现函数的私有变量的调用
![&quot;chart&quot;](http://img.mukewang.com/56a8b573000103af12800720.jpg)  
</code></pre><p>  子函数本身的this指向它所在函数<strong>调用</strong>的上下文决定的  </p>
<pre><code>var name = &quot;The Window&quot;;
var object = {
    name : &quot;My Object&quot;,
    getNameFunc : function(){
        return function(){
            return this.name;
        }
    }
}
alert(object.getNameFunc()());//window.name
</code></pre><p>  子函数得到了object的this - <strong>著名的that = this</strong>  </p>
<pre><code>var name = &quot;The Window&quot;;
var object = {
    name : &quot;My Object&quot;,
    getNameFunc : function(){
        var that = this;
        return function(){
            return that.name;
        };
    }
};
alert(object.getNameFunc()());
</code></pre><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" title="阮一峰的网络日志" target="_blank" rel="external">更多闭包的资料</a></p>
</blockquote>
<h2 id="不同调用方式"><a href="#不同调用方式" class="headerlink" title="不同调用方式"></a>不同调用方式</h2><ul>
<li>直接调用 foo()  </li>
<li>对象方法 foo.method()  </li>
<li>构造器   new foo()  </li>
<li>call/apply/bind func.call(obj)  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;作用域scope&quot;&gt;&lt;a href=&quot;#作用域scope&quot; class=&quot;headerlink&quot; title=&quot;作用域scope&quot;&gt;&lt;/a&gt;作用域scope&lt;/h2&gt;&lt;p&gt;因为JS有全局/局部变量的限制，不能从外部读取局部变量  &lt;/p&gt;
&lt;h3 id=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS函数</title>
    <link href="http://lycworks.me/blog/2016/05/18/JS-function/"/>
    <id>http://lycworks.me/blog/2016/05/18/JS-function/</id>
    <published>2016-05-18T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="函数-对象"><a href="#函数-对象" class="headerlink" title="函数(对象)"></a>函数(对象)</h1><p>return语句或this作为返回值</p>
<h2 id="不同创建方法"><a href="#不同创建方法" class="headerlink" title="不同创建方法"></a>不同创建方法</h2><ul>
<li><p>函数声明 <code>function foo(){}</code><br>声明会被前置 - 函数声明位置之前可以调用(类似于c在最前面建了constructor)</p>
<pre><code>var sum = add(a,b)
function add (a,b){
    return a+b        
} 
</code></pre></li>
</ul>
<blockquote>
<p>因此声明也不允许IEF立即调用 <code>function add(a,b){return a+b}()-&gt;NaN</code>  </p>
</blockquote>
<ul>
<li><p>函数表达式  </p>
<pre><code>var add = function(){}//function variable
(function(){})()//IEF立即执行
return function(){}//first-class function-&gt;闭包closure
var add = function foo(){}//NFE命名式 
</code></pre></li>
</ul>
<blockquote>
<p>函数表达式不可以通过函数的名字去调用 <code>foo()//报错，add()//正常</code></p>
</blockquote>
<ul>
<li><p><strong>不懂</strong> NFE命名式(不常见)  </p>
<pre><code>var func = function nfe(){}//出错
var func = function nfe(){ nfe() }//递归callback调用
</code></pre></li>
<li><p>Function构造器(不常见)  </p>
<pre><code>var func = new Function(&apos;a&apos;,&apos;b&apos;,&apos;console.log(a+b)&apos;)
</code></pre><blockquote>
<p>local不可访问（因为被提前声明， localVal 显示为underfined），global变量可以访问  </p>
</blockquote>
</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>this总是指向调用该方法的对象  </p>
</blockquote>
<ul>
<li>全局 this.document === document  </li>
<li>函数全局 function foo(){return this//window}  </li>
<li><p>作为对象方法的函数  </p>
<pre><code>var o = {
    prop: 37,
    f: function(){return this.prop}
}
console.log(o.f())

var o2 = {prop:37}
function independent(){ return this.prop }
o2.f = independent
console.log(o2.f())
</code></pre></li>
<li><p>对象原型链上  </p>
<pre><code>var yuanxing = {
    f: function(){
        return this.a+this.b
    }
}        
var o = Object.create(yuanxing)
console.log(o.f())//undefined
o.a = 1
o.b = 2
console.log(o.f())//3
</code></pre></li>
<li><p>get/set方法与this  </p>
<pre><code>function product(){ return this.a*this.b }
var num = { 
    a:1, 
    b:-1,
    get sum(){ return this.a + this.b }
}

Object.defineProperty(num,&apos;product&apos;,{
    get: product,
})//添加新的get
console.log(num.product)//-1
console.log(num.sum)//0
</code></pre></li>
<li><p>new构造器与this  </p>
<pre><code>function foo(){ this.a = 37 }
var obj = new foo()
console.log(obj.a)//37 
</code></pre><blockquote>
<p>当使用new构造器创建函数时没有return，将this作为返回值  </p>
</blockquote>
</li>
<li><p>call/apply方法与this - 改变函数体内部 this 的指向<br>whitedog = {food:”bone”}<br>blackcat.say.call(whitedog)来让this指向whitedog并调用blackcat的say方法  </p>
<pre><code>function cat(){}
cat.prototype = {
    food:&apos;fish&apos;,
    say: function(){
        console.log(&quot;i love &quot;+this.food)
    }
}

var blackcat = new cat()
blackcat.say()
var whitedog = {food:&apos;bone&apos;}
blackcat.say.call(whitedog)
</code></pre><blockquote>
<p>什么时候要用 - 比如说想要调用Object.prototype.toString，但是想指定其中的某一个this时，就可以用Object.prototype.toString.call（）这样的方法去调用没办法直接调用的方法。  </p>
</blockquote>
</li>
<li><p>bind绑定  </p>
<pre><code>var g = function f(){return this.a}.bind({a:&quot;test&quot;})
console.log(g())//test
</code></pre></li>
</ul>
<h2 id="arguments实际传入的参数"><a href="#arguments实际传入的参数" class="headerlink" title="arguments实际传入的参数"></a>arguments实际传入的参数</h2><p><img src="http://img.mukewang.com/5608d60d000103e812800720.jpg" alt="&quot;chart&quot;">  </p>
<p>bind &amp; currying - 可以重复使用类似的函数  </p>
<pre><code>function abwhatever(a,b,c){ console.log(a,b,c) }
var Default = abwhatever.bind(undefined/null,&apos;a&apos;,&apos;b&apos;) //没有this传入, a和b被固定住
Default(&apos;z&apos;)//a,b,z
Default(&apos;yo&apos;)//a,b,yo
</code></pre><p>bind &amp; new - bind失效  </p>
<pre><code>function foo(){ this.b = 100; return this.a}
var func = foo.bind({a:1})
func()//1
new func()//this指向原来的，a没有值，用this.b
</code></pre><h2 id="作用域scope-link"><a href="#作用域scope-link" class="headerlink" title="作用域scope (link)"></a>作用域scope (link)</h2><h2 id="不同调用方式"><a href="#不同调用方式" class="headerlink" title="不同调用方式"></a>不同调用方式</h2><ul>
<li>直接调用 foo()  </li>
<li>对象方法 foo.method()  </li>
<li>构造器   new foo()  </li>
<li>call/apply/bind func.call(obj)  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;函数-对象&quot;&gt;&lt;a href=&quot;#函数-对象&quot; class=&quot;headerlink&quot; title=&quot;函数(对象)&quot;&gt;&lt;/a&gt;函数(对象)&lt;/h1&gt;&lt;p&gt;return语句或this作为返回值&lt;/p&gt;
&lt;h2 id=&quot;不同创建方法&quot;&gt;&lt;a href=&quot;#不同
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS数组</title>
    <link href="http://lycworks.me/blog/2016/05/18/JS-array/"/>
    <id>http://lycworks.me/blog/2016/05/18/JS-array/</id>
    <published>2016-05-18T04:00:00.000Z</published>
    <updated>2017-02-02T21:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol>
<li><code>[]</code></li>
<li><code>[1,,2]</code>//1,undefined,2</li>
<li><code>new Array()</code><ul>
<li>传入一个参数是length</li>
<li>传入N个参数就是元素</li>
<li>new可以省略  </li>
</ul>
</li>
</ol>
<blockquote>
<p>delete 删除数组指定的元素，实际上将它用undefined代替，length不变</p>
</blockquote>
<h3 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.push() - add back</div><div class="line">.unshift() - add front</div><div class="line">.pop() - delete back</div><div class="line">.shift() - delete front</div></pre></td></tr></table></figure>
<h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p>二维<br>稀疏 - 不连续<code>[,,]</code><br>  判断用in<br>  arr1 = [undefined]<br>  0 in arr1 //true 因为下标0的key值是undefined<br>  arr2 = new Array(1)<br>0 in arr2 //false 因为下标0的key值不存在</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="原数组不会被修改"><a href="#原数组不会被修改" class="headerlink" title="原数组不会被修改"></a>原数组不会被修改</h4><p>arr.join(); //将数组转换为字符串，不写参数会以逗号分开，有参数就以参数作为分隔符<br><code>new Array(n+1).join(str)</code>的原理是,创建一个n+1大小的数组，若用join()方法会产生含n个“,”的字符串，而str正好代替这些“,”以造成重复n次str参数的字符串<br><code>newArray(2+1).join(&quot;a&quot;)//&quot;aa&quot;</code><br>arr.concat() //合并<br>  如果参数是一个一维数组（没有嵌套[]），则合并的时候会拉平数组，如果是嵌套数组，合并后只会拉平最外一层。  </p>
<p>arr.slice(a,b) // 左闭右开 a表示开始截取的位置以0开始计算，b为结束位置可以是负数(省略b的话则表示一直到数组末尾)</p>
<h4 id="原数组会被修改"><a href="#原数组会被修改" class="headerlink" title="原数组会被修改"></a>原数组会被修改</h4><p>arr.reverse() //倒序<br>arr.sort() //排序，默认已字母为优先级<br>  如果需要以数字升序排序，可以如下所示：<br>  arr.sort(<code>function(a,b){ return a-b}</code>)//通过比较两个数据的大小来进行排序<br>arr.splice// 拼接  </p>
<pre><code>* 返回被删除的元素  
* arr.splice(index, leng, ...)  
* 第一个变量为开始坐标，第二个变量为长度，意思是从坐标开始剪掉长度len个数组，而后面的变量为拼接的对象，该操作改变原数组  
</code></pre><h3 id="ES5-方法"><a href="#ES5-方法" class="headerlink" title="ES5++ 方法"></a>ES5++ 方法</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre><code>arr.forEach(function(x, index, a){
    x - 元素值
    index - index
    a - 指向数组本身
})
</code></pre><p>映射 - 修改后的值可以被返回成新的arr<br>        arr.map(function(x){<br>            return x + 10<br>        })  </p>
<p>过滤 - 修改后的值可以被返回成新的arr<br>        arr.filter(function(x,index){<br>            return index % 3 ===0<br>        })  </p>
<h4 id="判断元素"><a href="#判断元素" class="headerlink" title="判断元素"></a>判断元素</h4><p><code>arr.every(function(x){ return x&lt;3 })//false</code> 组内是否每个元素都满足条件<br><code>arr.some(function(x){ return x===3 })//true</code> 组内是否含有至少一个元素满足条件  </p>
<h4 id="判断数组本身-不是原型链继承"><a href="#判断数组本身-不是原型链继承" class="headerlink" title="判断数组本身(不是原型链继承)"></a>判断数组本身(不是原型链继承)</h4><pre><code>Array.isArray(数组)  
[] instanceof Array  
({}).toString.apply(..) === &apos;[object Array]&apos;
[].constructor === Array //继承数组会失效
</code></pre><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>arr.reduce(function(x,y){}, <code>0</code>) - x+0, x+1每两个元素进行逻辑运算, <code>0</code>是最初比较的值</p>
<blockquote>
<p>(例如arr=[1,2,3,4,5]和最初比较值0 进行乘法运算，最终是0)</p>
</blockquote>
<pre><code>arr.reduce(function(x,y){
    return x&gt;y? x : y
})
</code></pre><p>arr.reduceRight(..) - 从右到左</p>
<h4 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h4><p>arr.indexOf(元素，[查找点(可以用负数)]) - 从左向右<br>arr.lastIndexOf - 从右向左</p>
<hr>
<p>#数组 V 一般对象<br>(不建议)可以继承属性/方法 - Array.prototype, Object.prototype<br>数组是对象，对象不一定是数组 (单身狗就没对象哼╭(╯^╰)╮)<br>数组可以被添加/删除 - push/pop<br>但是<strong>BUT</strong><br>只有数组有length<br>从0-100访问比对象的属性访问快<br>只有数组继承Array.prototype的方法//join etc..  </p>
<h1 id="字符串是类数组"><a href="#字符串是类数组" class="headerlink" title="字符串是类数组"></a>字符串是类数组</h1><p>str.length<br>str.charAt(index) 或str[0]  </p>
<blockquote>
<p>可以通过Array.prototype.方法.call(str,方法本身的参数)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h3&gt;&lt;
    
    </summary>
    
    
  </entry>
  
</feed>
